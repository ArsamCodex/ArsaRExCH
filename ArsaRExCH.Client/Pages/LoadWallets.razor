@page "/LoadWallet"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@using System.Text.Json
@attribute [Authorize]

@if (wallets == null)
{
    <p>Loading...</p>
}
else if (!wallets.Any())
{
    <p>No wallets found for the current user.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Currency</th>
                    <th>Address</th>
                    <th>Network</th>
                    <th>Current Balance</th>
                    <th>Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var wallet in wallets)
                {
                    <tr>
                        <td>@wallet.PairName</td>
                        <td>@wallet.Adress</td>
                        <td>@wallet.Network</td>
                        <td>@wallet.CurrentBalance</td>
                        <td>@wallet.Amount</td>
                        <td>
                            <a href="/Whitdraw">Withdraw</a>
                            <a href="/Deposit">Deposit</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private List<WalletDTO>? wallets { get; set; } = new List<WalletDTO>();
    public string? user2 { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            wallets = await Http.GetFromJsonAsync<List<WalletDTO>>($"https://localhost:7258/api/Wallet/WalletsL/{user2}");


        }
        
    }

    public class WalletDTO
    {
        public string PairName { get; set; }
        public string Adress { get; set; }
        public double CurrentBalance { get; set; }
        public double Amount { get; set; }
        public string Network{ get; set; }

    }
}