@page "/BannedCountry"
@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@using System.Text.Json
@inject ArsaRExCH.Interface.AdministrationInterface _adminInterface
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime




@if(isAdmin){
<div class="container">
    <h3 class="text-center mt-4">Manage Banned Countries</h3>

    <!-- Button Group Container -->
    <div class="d-flex gap-2 mb-3">
        <!-- First Button -->
        <button class="btn btn-primary" @onclick="ToggleForm">
            @if (isFormVisible)
            {
                <text>Hide</text>
            }
            else
            {
                <text>Add Countrie To Bann</text>
            }
        </button>

        <!-- Second Button -->
        <button class="btn btn-primary" @onclick="ToggleForm2">
            @if (isFormVisible2)
            {
                <text>Hide</text>
            }
            else
            {
                <text>List Of BannedCountries</text>
            }
        </button>
    </div>

    @if (isFormVisible)
    {
        <div class="form-container mx-auto p-4 shadow-lg rounded">
            <EditForm Model="@banedCountry" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="ipAddressToBann">IP Address to Ban</label>
                    <InputText id="ipAddressToBann" class="form-control" @bind-Value="banedCountry.IpAdressToBann" placeholder="First 2 digit Of Ip" />
                </div>

                <div class="form-group mb-3">
                    <label for="countryName">Country Name</label>
                    <InputText id="countryName" class="form-control" @bind-Value="banedCountry.CountryName" placeholder="Enter country name" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary px-4">Save</button>
                </div>
            </EditForm>
        </div>
    }

    @if (isFormVisible2)
    {
        <div class="form-container mx-auto p-4 shadow-lg rounded">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ban ID</th>
                        <th>Country Name</th>
                        <th>IP Address to Ban</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var target in BannedCOuntryList)
                    {
                        <tr>
                            <td>@target.BanedCountriesId</td>
                            <td>@target.CountryName</td>
                            <td>@target.IpAdressToBann</td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => RemoveCountry(target.BanedCountriesId)">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    </div>
}
else
{
    <p> Admimnistration Section</p>
}
<style>
    .form-container {
        width: 80%;
        background-color: #f9f9f9;
    }

    .form-control {
        font-size: 1rem;
        padding: 10px;
    }

    .btn {
        font-size: 1rem;
        padding: 10px;
    }

    .d-flex {
        display: flex;
        justify-content: start;
        align-items: center;
    }

    .gap-2 {
        gap: 0.5rem; /* Adjusts the gap between the buttons */
    }
</style>


@code {
    private BanedCountries banedCountry = new BanedCountries();
    private List<BanedCountries> BannedCOuntryList = new List<BanedCountries>();
    private bool isFormVisible = false;
    private bool isFormVisible2 = false;
    private string user2 { get; set; }
    private string currentUserRole;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Check if the user is an admin directly here

            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var roles = await _adminInterface.GetUserRolesAsync(user);
            // var roles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            isAdmin = roles.Contains("Admin");
            currentUserRole = roles.FirstOrDefault();


        }
    }
    private void ToggleForm()
    {
        isFormVisible = !isFormVisible;
    }
    private async void ToggleForm2()
    {
        BannedCOuntryList = await _adminInterface.GetAllBannedCountriesInDatabase();
        isFormVisible2 = !isFormVisible2;


        // isFormVisible2 = false;

    }
    private async Task HandleValidSubmit()
    {
        await _adminInterface.AddBannCountries(banedCountry);
        banedCountry = new BanedCountries();
        isFormVisible = false;
        // BannedCOuntryList = await _adminInterface.GetAllBannedCountriesInDatabase();

    }
    private async Task RemoveCountry(int banedCountriesId)
    {
        // Ask for confirmation before proceeding
        var countryToRemove = BannedCOuntryList.FirstOrDefault(c => c.BanedCountriesId == banedCountriesId);
        if (countryToRemove != null)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the banned country {countryToRemove.CountryName}?");

            if (confirmed)
            {
                var success = await _adminInterface.RemoveBannedCuntries(banedCountriesId); // Assuming your service class is called `MyService`

                if (success)
                {
                    // Update the local list by removing the banned country
                    BannedCOuntryList.Remove(countryToRemove);
                    // Show success notification
                    await JSRuntime.InvokeAsync<object>("alert", "Banned country removed successfully!");
                }
                else
                {
                    // Show failure notification
                    await JSRuntime.InvokeAsync<object>("alert", "Failed to remove the banned country.");
                }
            }
        }
    }
}
