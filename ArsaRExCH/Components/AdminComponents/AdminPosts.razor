@page "/AdminPost"
@inject NavigationManager NavigationManager
@inject ArsaRExCH.Interface.PostNadReplyInterface _interface
@inject ArsaRExCH.Interface.AdministrationInterface _adminInterface
@inject AuthenticationStateProvider _AuthenticationStateProvider
@using ArsaRExCH.Model
@using ArsaRExCH.Components.Pages
@using ArsaRExCH.Components.MyComponents
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<h3>Create New Post</h3>

@if (isAdmin)
{
    <div class="post-form">
        <div class="form-group">
            <label for="postTitle">Post Title</label>
            <input type="text" id="postTitle" class="form-control" @bind="newPost.Title" />
        </div>

        <div class="form-group">
            <label for="postContent">Post Content</label>
            <textarea id="postContent" class="form-control" @bind="newPost.Content"></textarea>
        </div>

        <button class="btn btn-primary" @onclick="SubmitPost">Submit Post</button>
    </div>
}
else
{
    <p>Administration Section</p>
}
<p>@message</p>
<style>
    .post-form {
        max-width: 600px;
        margin: auto;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }

    .btn-primary {
        padding: 10px 20px;
        font-size: 18px;
    }
</style>
@code {
    private Post newPost = new Post();
    private string message = "";
    private string user2 { get; set; }
    private string currentUserRole;
    private bool isAdmin;

    private async Task SubmitPost()
    {
       
            newPost.CreatedAt = DateTime.Now;
            newPost.ApplicationUserId = user2;

            // Call the CreatePostAsync method without assigning to a variable
            await _interface.CreatePostAsync(newPost);
            message = "Post created successfully!";
            newPost = new Post(); // Reset the form
       
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Check if the user is an admin directly here

            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var roles = await _adminInterface.GetUserRolesAsync(user);
            // var roles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            isAdmin = roles.Contains("Admin");
            currentUserRole = roles.FirstOrDefault();
        }
     
    }

}
