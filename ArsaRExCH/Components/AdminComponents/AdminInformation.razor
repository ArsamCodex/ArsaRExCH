@page "/AdminInformation/{userId}"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject ArsaRExCH.Interface.AdministrationInterface _adminInterface
@inject ArsaRExCH.Interface.WalletInterface<double> _face
@rendermode InteractiveServer

<h5>First Init Administration / Exchange</h5>
<h6>Onlly User Whit Role "Exchange " or Admin At the time can Initialized The Application for first </h6>
<p>3 wallet has been made for administration</p>
<p>@userId </p>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}

<p>Here When admin is in this age for first init he we get option to set : 
    1: Trading Fee =>  2: Add USdt or any other wallet  3:And pool Id we wil back on this later.
    </p>
@code {
    [Parameter]
    public string userId { get; set; }
    public string user2 { get; set; }
    public string ErrorMessage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync started");

        try
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            Console.WriteLine("Authentication state retrieved");

            if (user.Identity?.IsAuthenticated == true)
            {
                user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
                Console.WriteLine($"User authenticated: {user2}");
                bool walletExists2 = await _face.CheckAndCreateWallets(user2);
                if (walletExists2)
                {
                    ErrorMessage = "Admin Is Already Initialized";
                    await Task.Delay(1000);
                    return;
                }
                await Task.Delay(1000);
                await _adminInterface.EditAdminInit();
                Console.WriteLine("Admin init edited");

                bool walletExists = await _face.CheckAndCreateWallets(user2);
                Console.WriteLine($"Wallet exists check complete: {walletExists}");

               
              
            }
            else
            {
                ErrorMessage = "User is not authenticated.";
                Console.WriteLine(ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Exception: {ex}");
        }
    }


}
