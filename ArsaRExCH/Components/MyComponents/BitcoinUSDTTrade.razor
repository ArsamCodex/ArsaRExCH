@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject ArsaRExCH.Interface.ITrade _tradeInterface
@rendermode InteractiveServer
@inject AuthenticationStateProvider _AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims


<div style="display: flex; width: 100%;">
    <div style="flex: 0 0 70%; height: 400px;">
        <ArsaRExCH.Components.Chartss.TradingViewChart></ArsaRExCH.Components.Chartss.TradingViewChart>
    </div>

    <div id="additional-content" style="flex: 0 0 30%; height: 400px; background-color: lightblue">
        <h5>Orders show here All</h5>
    </div>
</div>
<h5><b>@tradeModel.TradePair</b></h5>
<div style="display: flex;">
    <div style="width: 20%; margin-right: 10px;">
        <EditForm Model="@tradeModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="symbolI">BTC Amount</label>
                <InputNumber id="symbolI"
                             class="form-control"
                             @bind-Value="tradeModel.symbolI"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>


    </div>

    <div style="width: 20%; background-color: white; border: 1px solid #ccc; border-radius: 5px; padding: 20px;height:80px">
        <!-- Content for the white paper styled div goes here -->
        <p>To Get :@EstimatedUsdtToGet USDT </p>
        <p>Your content goes here...</p>
    </div>
</div>
<button type="button" class="btn btn-primary" @onclick="CalcuateUsdtGet">Calculate</button>
<p>@btcPriceVariable</p>
<p>@message</p>
<p>Usdt Back :@EstimatedUsdtToGet</p>
@code {
    private Trade tradeModel = new Trade();
    public string message { get; set; }
    public string user2{ get; set; }
    [CascadingParameter(Name = "BtcPrice")]
    public string BtcPrice { get; set; }

    public double EstimatedUsdtToGet { get; set; }

    [CascadingParameter(Name = "EthPrice")]
    public string EthPrice { get; set; }

    private string btcPriceVariable;
    private string ethPriceVariable;

    private async Task CalcuateUsdtGet()
    {
        var tt = ConvertStringToDouble(BtcPrice);
        var usdtBAck = tradeModel.symbolI * tt;
        EstimatedUsdtToGet = usdtBAck;
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called."); // Debugging output

        var feeFromDbCall = await _tradeInterface.GetTradeFee();
     
       
        var trade = new Trade
            {
                TradeId = Guid.NewGuid().ToString(), // Generate a new TradeId
                TradePair = PairNames.BTCUSDT, // Example value
                dateTime = DateTime.Now, // Current date and time
                symbolI = tradeModel.symbolI, // Bound model
                SymbolII = EstimatedUsdtToGet, // Bound model
                TradeFee = feeFromDbCall, //call db for dynamic trading fee
                IsMarketBuy = true,
                IsTradeDone = false,
                MyProperty = "sdsdsd",
                ApplicationUserId =user2, // Example value
                BitcoinPoolId = 15 // Example value call db for real one
            };

        // Save the trade to the database
        try
        {
            await _tradeInterface.SaveTrade(trade);
            message = "Trade added successfully!";
            trade = new Trade();
            Console.WriteLine(message); // Debugging output
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.Error.WriteLine($"An error occurred while saving the trade: {ex.Message}");
            message = "An error occurred while saving the trade.";
        }
    }
 
     protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            tradeModel.TradePair = PairNames.BTCUSDT;

        }

    }

        

    
    protected override void OnParametersSet()
    {
        btcPriceVariable = BtcPrice;
        ethPriceVariable = EthPrice;

        // Debugging output
        Console.WriteLine($"BTC Price received: {btcPriceVariable}");
        Console.WriteLine($"ETH Price received: {ethPriceVariable}");
    }
    public double ConvertStringToDouble(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            Console.WriteLine("Input string is null or empty.");
            return 0; // Or throw an exception based on your requirements
        }

        double result;
        if (double.TryParse(input, out result))
        {
            return result; // Conversion successful
        }
        else
        {
            Console.WriteLine($"Invalid format for double conversion: '{input}'");
            return 0; // Or throw an exception, or handle as needed
        }
    }

}