@using ArsaRExCH.Data
@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject ArsaRExCH.Interface.ITrade _tradeInterface
@inject ArsaRExCH.Interface.AdministrationInterface _adminInterface
@inject ArsaRExCH.Interface.WalletInterface<double> _walletInterface
@rendermode InteractiveServer
@inject AuthenticationStateProvider _AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@implements IDisposable
@inject ILogger<BitcoinUSDTTrade> _logger // Injecting ILogger
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
<div style="display: flex; width: 100%;">
    <div style="flex: 0 0 70%; height: 400px;">
        <ArsaRExCH.Components.Chartss.TradingViewChart pair="BTCUSDT"></ArsaRExCH.Components.Chartss.TradingViewChart>
    </div>

    <div id="additional-content" style="flex: 0 0 30%; height: 100px; background-color: white">
        <p>Market orders</p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>BTC</th>
                    <th>USDT</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in TradeListLast50)
                {
                    <tr>
                        <td style="padding: 3px 0;">@trade.User?.Id?.ToString()?.Substring(Math.Max(0, trade.User.Id.Length - 5))</td>
                        <td style="padding: 3px 0;">@trade.symbolI.ToString("F4")</td>
                        <td style="padding: 3px 0;">@trade.SymbolII.ToString("F4")</td>
                        <td style="padding: 3px 0;">@trade.dateTime</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

</div>

<div id="additional-content" style="width: 30%; height: 200px; background-color: white;float:right">
    <p>Your Orders</p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>BTC</th>
                <th>OrderPrice</th>
                <th>Type</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trade in OrderTradeList)
            {
                <tr>
                    <td>@trade.symbolI.ToString("F4")</td>
                    <td>@trade.RequestPriceFOrOrderBuy</td>
                    <td>@trade.order</td>
                    <td>@trade.dateTime</td>
                </tr>
            }
        </tbody>
    </table>

</div>
<div style="width:67%; display: flex; align-items: center; gap: 10px;">
    <div>
        <h5><b>Order Type</b></h5>
        <select @bind="selectedTradeType" class="form-select">
            <option value="Market">Market</option>
            <option value="Order">Order</option>
        </select>
    </div>
    <div>
        <h5><b>Buy/Sell</b></h5>
        <select @bind="selectedBuySel" class="form-select">
            <option value="Buy">Buy</option>
            <option value="Sell">Sell</option>
        </select>
    </div>
</div>
<h5><b>@tradeModel.TradePair</b></h5>
<div style="display: flex;">
    @if (selectedTradeType == "Market")
    {
        <div style="width: 20%; margin-right: 10px;">
            <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="symbolI">BTC Amount</label>
                    <InputNumber id="symbolI"
                                 class="form-control"
                                 @bind-Value="tradeModel.symbolI" />
                </div>
                <p>Available Balance to swap : @AvailableBtcAmountToSwap</p>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    }
    else
    {

        <div style="width: 20%; margin-right: 10px;">
            <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="symbolI">BTC Amount</label>
                    <InputNumber id="symbolI"
                                 class="form-control"
                                 @bind-Value="tradeModel.symbolI" />
                    <label for="symbolI">Order price</label>
                    <InputNumber id="symbolI"
                                 class="form-control"
                                 @bind-Value="tradeModel.RequestPriceFOrOrderBuy" />
                </div>
                <p>Available Balance to swap : @AvailableBtcAmountToSwap</p>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    }
    <div style="width: 30%; background-color: white; border: 1px solid #ccc; border-radius: 5px; padding: 20px;height:200px">
        <p>BTC Price :@btcPriceVariable</p>
        <p>Last Updated: @lastUpdatedTime</p>
        <p>Btc To swap :@BtcToswapInclude</p>
        <p>To Get :@EstimatedUsdtToGetInCludeFee USDT </p>
        <p>Fee : @feeFromDbCall.ToString("F9")</p>
        <p>Usdt: @UsdtWalletAmount</p>
    </div>
</div>
<p>@ErrorMessage</p>

@code {
    private Trade tradeModel = new Trade();
    private EditContext editContext;
    public string ErrorMessage { get; set; }
    public string user2 { get; set; }
    public double feeFromDbCall { get; set; }
    public double EstimatedUsdtToGetInCludeFee { get; set; }
    private string btcPriceVariable;
    private string ethPriceVariable;
    public double BtcToswapInclude { get; set; }
    public double AvailableBtcAmountToSwap { get; set; }
    private List<Trade> TradeListLast50 { get; set; } = new List<Trade>();
    private string selectedTradeType = "Market"; // Default selected value
    private List<Trade> OrderTradeList { get; set; } = new List<Trade>();
    private string selectedBuySel = "Sell";
    private double UsdtWalletAmount { get; set; }
    [CascadingParameter(Name = "EthPrice")]
    public string EthPrice { get; set; }

    [CascadingParameter(Name = "BtcPrice")]
    public string BtcPrice
    {
        get => btcPriceVariable;
        set
        {
            if (btcPriceVariable != value)
            {
                btcPriceVariable = value;
                UpdateTimestamp();
                HandleBtcPriceChangedAsync().ConfigureAwait(false);


            }
        }
    }
    private async Task HandleBtcPriceChangedAsync()
    {
        await FetchTradesAsync();
        await CalcuateUsdtGet();
        await FetchTradesAsyncUnfinished();
        //sel order
        // await FillOrderSell();
        await FillOrderSellHigherThenBtc();
        await HandeBuyOrders();
    }
    /*
    private async Task FillOrderSell()
    {
    if (selectedBuySel == "Sell" && selectedTradeType == "Order")
    {

    // Debug output for selected values
    Console.WriteLine($"Selected Buy/Sell: {selectedBuySel}, Selected Trade Type: {selectedTradeType}");

    // Attempt to fill order
    var isDieDone = await _tradeInterface.CheckAndFIlledOrderSellUnderbtCPrice(ConvertStringToDouble(btcPriceVariable));

    // Debugging output to check if order was filled
    if (isDieDone)
    {
    ErrorMessage = "Order Filled";
    Console.WriteLine("Order was successfully filled.");
    }
    else
    {
    ErrorMessage = "No orders filled.";
    Console.WriteLine("No orders were filled.");
    }
    }
    }*/
    private async Task FillOrderSellHigherThenBtc()
    {
        bool anyTradeFilled = false;

        if (selectedBuySel == "Sell" && selectedTradeType == "Order")
        {

            // Debug output for selected values
            Console.WriteLine($"Selected Buy/Sell: {selectedBuySel}, Selected Trade Type: {selectedTradeType}");

            // Attempt to fill order
            //   var isDieDone = await _tradeInterface.CheckAndFIlledOrderSellUnderbtCPrice(ConvertStringToDouble(btcPriceVariable));
            if (ConvertStringToDouble(btcPriceVariable) <= 0)
            {
                return;
            }

            var context = dbContextFactory.CreateDbContext();
            var trades = await context.Trade
                .Where(trade => !trade.IsTradeDone && !trade.IsMarketBuy && trade.order == OrderType.Sell)
                .ToListAsync();


            foreach (var trade in trades)
            {
                // Log trade details for debugging
                Console.WriteLine($"Trade Request Price: {trade.RequestPriceFOrOrderBuy}, BTC Price: {ConvertStringToDouble(btcPriceVariable)}");

                if (trade.RequestPriceFOrOrderBuy > ConvertStringToDouble(btcPriceVariable))
                {
                    trade.IsTradeDone = true; // Mark the trade as done
                    anyTradeFilled = true; // Set flag to indicate that a trade was filled
                    trade.BitcoinPriceAtTheTime = btcPriceVariable;

                    // Retrieve the USDT wallet for the user associated with this trade
                    var walletList = await context.Wallet.ToListAsync();

                    var UsdtWallet = walletList.Where(c => c.ApplicationUserId == trade.ApplicationUserId && c.PairName == "USDT")
                    .FirstOrDefault();

                    if (UsdtWallet != null)
                    {
                        UsdtWallet.Amount += trade.symbolI;
                    }
                    else
                    {
                        Console.WriteLine("BTC wallet not found for the user.");
                    }



                    Console.WriteLine("Order filled for trade, and USDT wallet updated."); // Debug log


                    Console.WriteLine("Order filled for trade."); // Debug log
                }
            }

            await context.SaveChangesAsync(); // Save changes if any trades were filled
            UsdtWalletAmount = await USDTWalletAmountExtractor();
            if (anyTradeFilled)
            {
                ErrorMessage = "Order Filled";
                Console.WriteLine("Order was successfully filled.");
            }

        }
    }
    private async Task HandeBuyOrders()
    {
        bool anyTradeFilled = false;
        if (selectedBuySel == "Buy" && selectedTradeType == "Order")
        {

            // Debug output for selected values
            Console.WriteLine($"Selected Buy/Sell: {selectedBuySel}, Selected Trade Type: {selectedTradeType}");

            if (ConvertStringToDouble(btcPriceVariable) <= 0)
            {
                return;
            }

            var context = dbContextFactory.CreateDbContext();
            var trades = await context.Trade
                .Where(trade => !trade.IsTradeDone && !trade.IsMarketBuy && trade.order == OrderType.Buy)
                .ToListAsync();


            foreach (var trade in trades)
            {
                // Log trade details for debugging
                Console.WriteLine($"Trade Request Price: {trade.RequestPriceFOrOrderBuy}, BTC Price: {ConvertStringToDouble(btcPriceVariable)}");

                if (trade.RequestPriceFOrOrderBuy > ConvertStringToDouble(btcPriceVariable))
                {
                    trade.IsTradeDone = true; // Mark the trade as done
                    anyTradeFilled = true; // Set flag to indicate that a trade was filled
                    trade.BitcoinPriceAtTheTime = btcPriceVariable;

                    // Retrieve the USDT wallet for the user associated with this trade
                    var walletList = await context.Wallet.ToListAsync();

                    var bTcWallet = walletList.Where(c => c.ApplicationUserId == trade.ApplicationUserId && c.PairName == "BTC")
                    .FirstOrDefault();

                    if (bTcWallet != null)
                    {
                        bTcWallet.Amount +=trade.symbolI;
                    }
                    else
                    {
                        Console.WriteLine("BTC wallet not found for the user.");
                    }
                    /*
                    var x = context.Wallet
                         .Where(c => c.ApplicationUserId == user2 && c.PairName == "USDT")
                         .FirstOrDefault();

                    UsdtWalletAmount = x.Amount;*/


                    Console.WriteLine("Order filled for trade, and USDT wallet updated."); // Debug log


                    Console.WriteLine("Order filled for trade."); // Debug log
                }
            }

            await context.SaveChangesAsync(); // Save changes if any trades were filled
            AvailableBtcAmountToSwap = await _walletInterface.GetBTCBalanceOfWallet(user2);

            // Debugging output to check if order was filled
            if (anyTradeFilled)
            {
                ErrorMessage = "Order Filled";
                Console.WriteLine("Order was successfully filled.");
            }

        }
    }
    private async Task FetchTradesAsyncUnfinished()
    {
        try
        {
            var allTrades = await _tradeInterface.GetAllTrades();
            OrderTradeList = allTrades
                    .Where(trade => trade.IsTradeDone == false && trade.IsMarketBuy == false && trade.ApplicationUserId == user2)
                    .OrderByDescending(trade => trade.dateTime)
                    .Take(5)
                    .ToList(); StateHasChanged(); // Request a UI update
        }
        catch (Exception ex)
        {
            OrderTradeList = new List<Trade>(); // Ensure no null reference
            Console.WriteLine($"Error fetching trades: {ex.Message}"); // Debug log
        }
    }
    private async Task FetchTradesAsync()
    {
        try
        {
            var allTrades = await _tradeInterface.GetAllTrades();
            TradeListLast50 = allTrades
                    .Where(trade => trade.IsTradeDone)
                    .OrderByDescending(trade => trade.dateTime)
                    .Take(12)
                    .ToList(); StateHasChanged(); // Request a UI update
        }
        catch (Exception ex)
        {
            TradeListLast50 = new List<Trade>(); // Ensure no null reference
            Console.WriteLine($"Error fetching trades: {ex.Message}"); // Debug log
        }
    }
    private string lastUpdatedTime;

    private void UpdateTimestamp()
    {
        lastUpdatedTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        StateHasChanged(); // Trigger a UI update
    }
    protected override void OnParametersSet()
    {
        btcPriceVariable = BtcPrice;
        ethPriceVariable = EthPrice;
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(tradeModel);
        editContext.OnFieldChanged += HandleFieldChanged;

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            tradeModel.TradePair = PairNames.BTCUSDT;
            AvailableBtcAmountToSwap = await _walletInterface.GetBTCBalanceOfWallet(user2);
            feeFromDbCall = await _tradeInterface.GetTradeFee();
            var context = dbContextFactory.CreateDbContext();
            var x = context.Wallet
                             .Where(c => c.ApplicationUserId == user2 && c.PairName == "USDT")
                             .FirstOrDefault();

            UsdtWalletAmount = x.Amount;
        }
    }

    private async void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(tradeModel.symbolI))
        {
            // Update calculations or other logic based on the changed field
            //  BtcToswapInclude = tradeModel.symbolI - feeFromDbCall;
            await CalcuateUsdtGet();
        }
    }

    private async Task CalcuateUsdtGet()
    {
        var tt = ConvertStringToDouble(BtcPrice);
        var usdtBAck = tradeModel.symbolI * tt;
        EstimatedUsdtToGetInCludeFee = usdtBAck;
        BtcToswapInclude = tradeModel.symbolI - feeFromDbCall;
    }

    private async Task HandleValidSubmit()
    {
        if (tradeModel.symbolI > AvailableBtcAmountToSwap)
        {
            ErrorMessage = "Not Enough Balance Available";
            return;
        }

        if (selectedTradeType == "Market")
        {
            var trade = new Trade
                {
                    TradeId = Guid.NewGuid().ToString(),
                    TradePair = PairNames.BTCUSDT,
                    dateTime = DateTime.Now,
                    symbolI = tradeModel.symbolI,
                    SymbolII = EstimatedUsdtToGetInCludeFee,
                    TradeFee = feeFromDbCall, // TODO: edit exchange wallet
                    IsMarketBuy = true,
                    IsTradeDone = true,
                    RequestPriceFOrOrderBuy = 0,
                    BitcoinPriceAtTheTime = btcPriceVariable,
                    ApplicationUserId = user2,
                    BitcoinPoolId = 1 // hardcode pool - A CALL TO DB NEED
                };

            try
            {
                await _tradeInterface.SaveTrade(trade);
                await _walletInterface.UpdateWalletsAfterTradeAsync(user2, tradeModel.symbolI, EstimatedUsdtToGetInCludeFee);
                string ExchangeUserid = "937962b7-0730-4ccd-a3b2-102e4ae1cab8";
                await _adminInterface.EditBTCWalletExchangeAmountIncrease(ExchangeUserid, feeFromDbCall);
                ErrorMessage = "Trade added successfully!";
                tradeModel = new Trade();
                AvailableBtcAmountToSwap = await _walletInterface.GetBTCBalanceOfWallet(user2);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"An error occurred while saving the trade.{ex}";
            }
        }
        if (selectedTradeType == "Order" && selectedBuySel == "Sell")
        {
            var trade = new Trade
                {
                    TradeId = Guid.NewGuid().ToString(),
                    TradePair = PairNames.BTCUSDT,
                    dateTime = DateTime.Now,
                    symbolI = tradeModel.symbolI,
                    SymbolII = 0,
                    TradeFee = feeFromDbCall, // TODO: edit exchange wallet
                    IsMarketBuy = false,
                    IsTradeDone = false,
                    order = OrderType.Sell,
                    BitcoinPriceAtTheTime = btcPriceVariable,

                    RequestPriceFOrOrderBuy = tradeModel.RequestPriceFOrOrderBuy,
                    ApplicationUserId = user2,
                    BitcoinPoolId = 1 // hardcode pool - A CALL TO DB NEED
                };

            try
            {
                await _tradeInterface.SaveTrade(trade);
                await _walletInterface.UpdateWalletsAfterTradeAsync(user2, tradeModel.symbolI, EstimatedUsdtToGetInCludeFee);
                string ExchangeUserid = "937962b7-0730-4ccd-a3b2-102e4ae1cab8";
                await _adminInterface.EditBTCWalletExchangeAmountIncrease(ExchangeUserid, feeFromDbCall);
                ErrorMessage = "Trade added successfully!";
                tradeModel = new Trade();
                AvailableBtcAmountToSwap = await _walletInterface.GetBTCBalanceOfWallet(user2);
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while saving the trade. order";
                _logger.LogError(ex, "An error occurred in CheckAndFIlledOrder method while saving trade order.");

            }
        }
        if (selectedTradeType == "Order" && selectedBuySel == "Buy")
        {
            var trade = new Trade
                {
                    TradeId = Guid.NewGuid().ToString(),
                    TradePair = PairNames.BTCUSDT,
                    dateTime = DateTime.Now,
                    symbolI = tradeModel.symbolI,
                    SymbolII = 0,
                    TradeFee = feeFromDbCall, // TODO: edit exchange wallet
                    IsMarketBuy = false,
                    IsTradeDone = false,
                    order = OrderType.Buy,
                    BitcoinPriceAtTheTime = btcPriceVariable,

                    RequestPriceFOrOrderBuy = tradeModel.RequestPriceFOrOrderBuy,
                    ApplicationUserId = user2,
                    BitcoinPoolId = 1 // hardcode pool - A CALL TO DB NEED
                };

            try
            {
                await _tradeInterface.SaveTrade(trade);
                await _walletInterface.UpdateWalletsAfterTradeAsyncBuyOrder(user2, tradeModel.symbolI, EstimatedUsdtToGetInCludeFee);
                string ExchangeUserid = "937962b7-0730-4ccd-a3b2-102e4ae1cab8";
                await _adminInterface.EditBTCWalletExchangeAmountIncrease(ExchangeUserid, feeFromDbCall);
                ErrorMessage = "Trade added successfully!";
                tradeModel = new Trade();
                AvailableBtcAmountToSwap = await _walletInterface.GetBTCBalanceOfWallet(user2);
                UsdtWalletAmount = await USDTWalletAmountExtractor();
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while saving the trade. order";
                _logger.LogError(ex, "An error occurred in CheckAndFIlledOrder method while saving trade order.");

            }
        }
    }


    public double ConvertStringToDouble(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            Console.WriteLine("Input string is null or empty.");
            return 0;
        }

        double result;
        if (double.TryParse(input, out result))
        {
            return result;
        }
        else
        {
            Console.WriteLine($"Invalid format for double conversion: '{input}'");
            return 0;
        }
    }
    private async Task<double> USDTWalletAmountExtractor()
    {
        var context = dbContextFactory.CreateDbContext();
        var wallet = await context.Wallet
            .Where(c => c.ApplicationUserId == user2 && c.PairName == "USDT")
            .FirstOrDefaultAsync();

        // Check if the wallet was found before accessing the Amount property
        return wallet.Amount; // Returns 0 if wallet is null
    }

    public void Dispose()
    {
        // Unsubscribe from the OnFieldChanged event
        if (editContext != null)
        {
            editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
