@using System.Security.Claims
@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@inject ArsaRExCH.Interface.ILiveChat _liveCHatInterface
@rendermode InteractiveServer
@using  System.Text

@attribute [Authorize]

<div class="form-group mt-3">
    <label for="chat-box">Chat Messages</label>
    <textarea id="chat-box" class="form-control" rows="10" readonly>@Messages</textarea>
</div>

<EditForm Model="@lifeChat" OnValidSubmit="SaveMessage" FormName="@FormName">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="message">Message</label>
        <InputText id="message" class="form-control" @bind-Value="lifeChat.Message" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
<p>@messagetoshow</p>

@code {
    private LiveChat lifeChat = new LiveChat();
    private List<LiveChat> liveChats = new List<LiveChat>();
    private string user2 { get; set; }
    private string FormName = "Live Chat Form";
    private string Messages = ""; // To store and display messages
    private CancellationTokenSource _cancellationTokenSource;
    public string messagetoshow { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        }

        await LoadMessages();

        // Start the refresh task
        _cancellationTokenSource = new CancellationTokenSource();
        _ = RefreshMessagesAsync(_cancellationTokenSource.Token);
    }

  
    private async Task SaveMessage()
    {
        lifeChat.TimeAndDate = DateTime.Now;
        lifeChat.ApplicationUserId = user2;
        await _liveCHatInterface.SaveMessage(lifeChat);
        await LoadMessages();
        StateHasChanged();
        lifeChat = new LiveChat();
    }

    private async Task LoadMessages()
    {
        try
        {
            liveChats = await _liveCHatInterface.GetAllMessages();
            var messageBuilder = new StringBuilder();

            foreach (var chat in liveChats.OrderByDescending(x => x.TimeAndDate))
            {
                string userIdLastSix = chat.ApplicationUserId.Length > 6
                                       ? chat.ApplicationUserId.Substring(chat.ApplicationUserId.Length - 6)
                                       : chat.ApplicationUserId;
                messageBuilder.AppendLine($"{userIdLastSix}: ({chat.TimeAndDate}) : {chat.Message}");
            }

            Messages = messageBuilder.ToString();
        }
        catch (ObjectDisposedException ex)
        {
            Console.WriteLine("Service was disposed prematurely: " + ex.Message);
            // Consider re-throwing or handling based on your needs
        }
    }

    private async Task RefreshMessagesAsync(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            await Task.Delay(TimeSpan.FromSeconds(10), cancellationToken);
            await LoadMessages();

            Console.WriteLine("Refreshed");
            messagetoshow = "Refreshed"; // For UI update
            StateHasChanged();
        }
    }


    public void Dispose()
    {
        // Dispose the cancellation token source when the component is disposed
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}
