@page "/ee"
@using ArsaRExCH.Components.Account
@using ArsaRExCH.Data
@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Authorization
@inject IHttpContextAccessor HttpContextAccessor
@inject IdentityUserAccessor UserAccessor
@inject ArsaRExCH.Interface.ITrade _tradeInterface
@attribute [Authorize]

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>BTC</th>
            <th>USDT</th>
            <th>Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trade in TradeListLast50)
        {
            <tr>
                <td>@trade.User?.Id?.ToString()?.Substring(Math.Max(0, trade.User.Id.Length - 5))</td>
                <td>@trade.symbolI.ToString("F4")</td>
                <td>@trade.SymbolII.ToString("F4")</td>
                <td>@trade.dateTime</td>
            </tr>
        }
    </tbody>
</table>
@code {
    private string ErrorMessage { get; set; }
    private ApplicationUser user5 = default!;
    private List<Trade> TradeListLast50 { get; set; } = new List<Trade>();
    private bool _isRunning;

    protected override async Task OnInitializedAsync()
    {
        // Start fetching data every 5 seconds
        _isRunning = true;
        await FetchTradesPeriodically();
    }

    private async Task FetchTradesPeriodically()
    {
        while (_isRunning)
        {
            await FetchTradesAsync();
            await Task.Delay(5000); // Wait for 5 seconds
        }
    }

    private async Task FetchTradesAsync()
    {
        try
        {
            var allTrades = await _tradeInterface.GetAllTrades();
            TradeListLast50 = allTrades.OrderByDescending(trade => trade.dateTime).Take(50).ToList();
            await InvokeAsync(StateHasChanged); // Update the UI
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while retrieving trades: {ex.Message}";
            await InvokeAsync(StateHasChanged); // Ensure UI reflects the error
        }
    }

    public void Dispose()
    {
        _isRunning = false; // Stop the fetching loop when the component is disposed
    }
}