@inject IJSRuntime JS
@implements IDisposable
@inject ArsaRExCH.Interface.PropInterface.IProp _prop
@using ArsaRExCH.Components.Account
@using ArsaRExCH.DTOs
@using ArsaRExCH.Interface
@using ArsaRExCH.Model.Prop
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject IdentityUserAccessor UserAccessor
@using ArsaRExCH.Components.Chartss


<GetPropBalance></GetPropBalance>
<div style="display: flex; gap: 20px;">

    <!-- Chart Container -->
    <div style="width: 70%; height: 400px;">
        <ArsaRExCH.Components.Chartss.TradingViewChart pair="BTCUSDT"></ArsaRExCH.Components.Chartss.TradingViewChart>
    </div>

    <!-- Sidebar for Progress Bar, Form, and Dropdowns -->
    <div style="display: flex; flex-direction: column; gap: 20px; width: 30%; border: 1px solid red; padding: 10px;">

        <!-- Progress Bar on Top -->
        <div style="flex: 1;">
            <div class="progress" style="height: 20px;">
                <div class="progress-bar" role="progressbar" style="width: @GetPercentage(Level)%;"
                     aria-valuenow="@Level" aria-valuemin="2" aria-valuemax="20">
                    @Level
                </div>
            </div>
        </div>

        <!-- Leverage Slider and Dropdowns Below Progress Bar -->
        <div style="display: flex; flex-direction: column; gap: 20px;">

            <!-- Leverage Control -->
            <div>
                <label for="levelSlider">Leverage (2-20):</label>
                <input type="range" id="levelSlider" min="2" max="20" @bind="Level" class="form-range" />
                <p>Chosen Leverage: @Level</p>
            </div>

            <!-- Order Type and Buy/Sell Selection -->
            <div style="display: flex; gap: 10px; justify-content: space-between;">
                <div>
                    <h5><b>Order Type</b></h5>
                    <select @bind="selectedTradeType" class="form-select">
                        <option value="Market">Market</option>
                        <option value="Order">Order</option>
                    </select>
                </div>
                <div>
                    <h5><b>Buy/Sell</b></h5>
                    <select @bind="selectedBuySel" class="form-select">
                        <option value="Buy">Buy</option>
                        <option value="Sell">Sell</option>
                    </select>
                </div>
            </div>
            <!-- Form for Amount, Take Profit, Stop Loss, and Submit Button -->
            <EditForm EditContext="@editContext" OnValidSubmit="HandleTradeBuyMarketButton">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group" style="display: flex; gap: 20px; justify-content: space-between;">

                    <!-- Amount Field -->
                    <div style="flex: 1; display: flex; gap: 20px;">
                        @if (selectedBuySel == "Buy" && selectedTradeType == "Market")
                        {
                            <!-- Amount Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="symbolI">Amount</label>
                                <InputNumber id="symbolI"
                                             class="form-control"
                                             @bind-Value="propTrade.OrderPriceOpened" />
                            </div>

                            <!-- Take Profit Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="takeProfit">Take Profit</label>
                                <InputNumber id="takeProfit"
                                             class="form-control"
                                             @bind-Value="propTrade.TakeProfit" />
                            </div>

                            <!-- Stop Loss Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="stopLoss">Stop Loss</label>
                                <InputNumber id="stopLoss"
                                             class="form-control"
                                             @bind-Value="propTrade.StopLoss" />
                            </div>
                        }
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Place Order</button>
            </EditForm>



        </div>
    </div>
</div>
<div style="display: flex; gap: 20px;">

    <!-- Chart Container -->
    <div style="width: 70%; height: 400px;background-color:red">
    </div>

    <!-- Sidebar for Progress Bar, Form, and Dropdowns -->
    <div style="display: flex; flex-direction: column; gap: 20px; width: 30%; border: 1px solid red; padding: 10px;">


    </div>
</div>
@code {
    private Timer _timer;
    private int Level { get; set; } = 0;
    private string selectedTradeType = "Market"; // Default selected value
    private List<PropTrade> OrderTradeList { get; set; } = new List<PropTrade>();
    private string selectedBuySel = "Sell";
    private EditContext editContext;
    private PropTrade propTrade = new PropTrade();
    public string? user2 { get; set; }
    public decimal OpenedPrice { get; set; }
    public decimal Tp { get; set; }
    public decimal Sl { get; set; }
    public string? ErrorMessage { get; set; }
    public decimal LiquidationPrice { get; set; }
    public decimal TotalMargin { get; set; }
    public string btcPriceVariable { get; set; }

    private async Task HandleTradeBuyMarketButton()
    {
        //save order first 
        // Initialize PropTrade values (can be dynamically set based on user input or calculations)
        propTrade.TradeOpened = DateTime.Now;

        propTrade.OrderPriceOpened = 35000; // For example, order price for buy
        propTrade.Leverage = 10; // Example leverage value
        propTrade.AmountForOrder = 0; // Example order amount
        propTrade.Status = OrderStatus.Open; // Initial status as Pending
    }
    private double GetPercentage(int level)
    {
        // Map the Level range (2-20) to 0-100% for the progress bar width.
        return (level - 2) / 18.0 * 100;
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(propTrade);
        editContext.OnFieldChanged += HandleFieldChanged;
        // Fetch initial data
        var context = HttpContextAccessor.HttpContext;
        if (context != null)
        {
            var user5 = await UserAccessor.GetRequiredUserAsync(context);
            if (user5 != null)
            {
                user2 = user5.Id; // Get the user ID here
                Console.WriteLine(user5.Id);
            }
            else
            {
                ErrorMessage = "Unable to retrieve user.";
            }
        }
        else
        {
            ErrorMessage = "HttpContext is not available.";
        }

        // Set up a timer to refresh data every 5 seconds

    }

    private async Task<decimal> CalculateBuyMarketLiquidation(int Leverage , decimal OrderPrice, decimal amount)
    {
        //Here we calculate liquidation for BUy Market
        //Liquidation formula liquidationPrice = orderPrice * (1 - (1m / leverage));
        /*Example
        *      liquidationPrice = orderPrice * (1 - (amount / totalPositionSize));
        *
        *
        *
        */
        // Calculate the total position size, which is margin * leverage
        if (Leverage==0 || OrderPrice==0 || amount == 0)
        {
            ErrorMessage = " zeop devide error";
        }
        decimal totalPositionSize = amount * Level;
        // liquidation price is =>if total posistion loss is =amount
        TotalMargin = totalPositionSize;

        // Calculate the liquidation price
        decimal liquidationPrice = OrderPrice * (1 - (propTrade.OrderPriceOpened / totalPositionSize));
        LiquidationPrice = liquidationPrice;
        return  liquidationPrice;


    }



    private async void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(propTrade.OrderPriceOpened) )
        {
            await CalculateBuyMarketLiquidation(Level,50000, propTrade.OrderPriceOpened);
        }
    }

    public void Dispose()
    {
        // Dispose the timer when the component is disposed
        _timer?.Dispose();
    }

    [CascadingParameter(Name = "BtcPrice")]
    public string BtcPrice
    {
        get => btcPriceVariable;
        set
        {
            if (btcPriceVariable != value)
            {
                btcPriceVariable = value;



            }
        }
    }
    protected override void OnParametersSet()
    {
        btcPriceVariable = BtcPrice;

    }
}