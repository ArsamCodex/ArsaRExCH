@inject IJSRuntime JS
@implements IDisposable
@inject ArsaRExCH.Interface.PropInterface.IProp _prop
@using ArsaRExCH.Components.Account
@using ArsaRExCH.DTOs
@using ArsaRExCH.Interface
@using ArsaRExCH.Model.Prop
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject IdentityUserAccessor UserAccessor
@using ArsaRExCH.Components.Chartss
@using Microsoft.EntityFrameworkCore
@using ArsaRExCH.Data
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<div style="display: flex; gap: 20px; align-items: center; font-size: 16px; color: #333; font-family: Arial, sans-serif;">
    <p style="margin: 0; font-weight: bold;">Prop User Balance: <span style="font-weight: normal;background-color:greenyellow">@propUser.Balance</span></p>
    <p style="margin: 0; font-weight: bold;">Account Type: <span style="font-weight: normal;">@propUser.CurrentAccountType</span></p>
    <p style="margin: 0; font-weight: bold;">PropUserId: <span style="font-weight: normal;">@propUser.PropUserId</span></p>

</div>



<div style="display: flex; gap: 20px;">

    <!-- Chart Container -->
    <div style="width: 70%; height: 400px;">
        <ArsaRExCH.Components.Chartss.TradingViewChart pair="BTCUSDT"></ArsaRExCH.Components.Chartss.TradingViewChart>
    </div>
    <!-- Sidebar for Progress Bar, Form, and Dropdowns -->
    <div style="display: flex; flex-direction: column; gap: 20px; width: 30%; border: 1px solid red; padding: 10px;">

        <!-- Progress Bar on Top -->
        <div style="flex: 1;">
            <div class="progress" style="height: 20px;">
                <div class="progress-bar" role="progressbar" style="width: @GetPercentage(Level)%;"
                     aria-valuenow="@Level" aria-valuemin="2" aria-valuemax="20">
                    @Level
                </div>
            </div>
        </div>

        <!-- Leverage Slider and Dropdowns Below Progress Bar -->
        <div style="display: flex; flex-direction: column; gap: 20px;">

            <!-- Leverage Control -->
            <div>
                <label for="levelSlider">Leverage (2-20):</label>
                <input type="range" id="levelSlider" min="2" max="20" @bind="Level" class="form-range" />
                <p>Chosen Leverage: @Level</p>
            </div>

            <!-- Order Type and Buy/Sell Selection -->
            <div style="display: flex; gap: 10px; justify-content: space-between;">
                <div>
                    <h5><b>Order Type</b></h5>
                    <select @bind="selectedTradeType" class="form-select">
                        <option value="Market">Market</option>
                        <option value="Order">Order</option>
                    </select>
                </div>
                <div>
                    <h5><b>Buy/Sell</b></h5>
                    <select @bind="selectedBuySel" class="form-select">
                        <option value="Buy">Buy</option>
                        <option value="Sell">Sell</option>
                    </select>
                </div>
            </div>
            <!-- Form for Amount, Take Profit, Stop Loss, and Submit Button -->
            <EditForm EditContext="@editContext" OnValidSubmit="HandleTradeBuyMarketButton">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group" style="display: flex; gap: 20px; justify-content: space-between;">

                    <!-- Amount Field -->
                    <div style="flex: 1; display: flex; gap: 20px;">
                        @if (selectedBuySel == "Buy" && selectedTradeType == "Market")
                        {
                            <!-- Amount Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="symbolI">Amount</label>
                                <InputNumber id="symbolI"
                                             class="form-control"
                                             @bind-Value="propTrade.AmountForOrder" />
                            </div>

                            <!-- Take Profit Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="takeProfit">Take Profit</label>
                                <InputNumber id="takeProfit"
                                             class="form-control"
                                             @bind-Value="propTrade.TakeProfit" />
                            </div>

                            <!-- Stop Loss Field -->
                            <div style="flex: 1; width: 25%;">
                                <label for="stopLoss">Stop Loss</label>
                                <InputNumber id="stopLoss"
                                             class="form-control"
                                             @bind-Value="propTrade.StopLoss" />
                            </div>
                        }
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Place Order</button>
            </EditForm>



        </div>
    </div>
</div>
<div style="display: flex; gap: 20px;">

    <div style="width: 70%; height: 400px">
        @if (OrderTradeList == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (OrderTradeList.Count == 0)
        {
            <p>No prop trades found.</p>
        }
        else
        {
            <table class="table table-bordered" style="box-shadow: 0px 4px 8px rgba(4, 6, 4, 0.3);">
                <thead>
                    <tr>
                        <th>Order Price </th>
                        <th>SL</th>
                        <th>Amount </th>
                        <th>Leverage</th>
                        <th> Opened Date</th>
                        <th> Margin Size</th>
                        <th>Profit</th>
                      
                        <th>Action</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var trade in OrderTradeList)
                    {
                        <tr>
                            <td style="width:12%">@trade.OrderPriceOpened.ToString("0.###")</td>
                            <td style="width:12%">@trade.StopLoss</td>
                            <td>@trade.AmountForOrder.ToString("0.##")</td>
                            <td>@trade.Leverage</td>
                            <td>@trade.TradeOpened.ToString("yyyy-MM-dd HH:mm:ss")</td>
                            <td>@((trade.Leverage * trade.AmountForOrder).ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("en-US"))) </td>

                            <td>
                                @{
                                    var profitLoss = CalculateProfitLossInDollar(
                                    trade.OrderPriceOpened,
                                    decimal.TryParse(btcPriceVariable, out var parsedPrice) ? parsedPrice : 0m,
                                    trade.AmountForOrder,
                                    trade.Leverage
                                    );
                                    var backgroundColor = profitLoss >= 0 ? "green" : "red";
                                }
                                <span style="font-weight: normal; background-color: @backgroundColor; color: white;">
                                    @profitLoss.ToString("0.###")
                                </span>
                            </td>
                            <td>
                                <button @onclick="() => CloseMarketOrder(trade.PropTradeId)"
                                        style="background-color: yellow; color: black; border: none; padding: 8px 16px; cursor: pointer;"
                                        onmouseover="this.style.backgroundColor='red'; this.style.color='white';"
                                        onmouseout="this.style.backgroundColor='yellow'; this.style.color='black';">
                                    Close
                                </button>
                            </td>


                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <!-- Sidebar for Progress Bar, Form, and Dropdowns -->
    <div style="display: flex; flex-direction: column; gap: 20px; width: 30%; border: 1px solid red; padding: 10px;">
        <p>hgggj</p>
    </div>
</div>
@ErrorMessage
@code {
    [Parameter]
    public string HashFllag { get; set; }
    private Timer _timer;
    private int Level { get; set; } = 2;
    private string selectedTradeType = "Market"; // Default selected value
    private List<PropTrade> OrderTradeList { get; set; } = new List<PropTrade>();
    private string selectedBuySel = "Sell";
    private EditContext editContext;
    private PropTrade propTrade = new PropTrade();
    public string? user2 { get; set; }
    public decimal OpenedPrice { get; set; }
    public decimal Tp { get; set; }
    public decimal Sl { get; set; }
    public string? ErrorMessage { get; set; }
    public decimal LiquidationPrice { get; set; }
    public decimal TotalMargin { get; set; }
    public string btcPriceVariable { get; set; }
    public int PropUserId { get; set; }
    public PropUser propUser { get; set; } = new PropUser();
    public decimal WinstOrLost { get; set; }
    public int userIdprop { get; set; }
    public decimal PandL { get; set; }



    private async Task HandleTradeBuyMarketButton()
    {
        var btcDecimal = decimal.TryParse(btcPriceVariable, out var parsedPrice) ? parsedPrice : 0m;
        if (selectedTradeType == "Market" && selectedBuySel == "Buy")
        {
            if (propTrade.AmountForOrder <= 0)
            {
                ErrorMessage = "amount smaller then zero";
                return;
            }

            var newPropTrade = new PropTrade
                {
                    TradeOpened = DateTime.Now,
                    OrderPriceOpened = btcDecimal,
                    Leverage = Level, // Example leverage value
                    AmountForOrder = propTrade.AmountForOrder, // Example order amount
                    Status = OrderStatus.Open, // Initial status as Open
                    ProfitInCase = 0,
                    FeeInCase = 0,
                    orderTypeProp = OrderTypeProp.Buy,
                    LiquidationPrice = CalculateBuyMarketLiquidation(Level, btcDecimal, propTrade.AmountForOrder),
                    TakeProfit = propTrade.TakeProfit,
                    StopLoss = propTrade.StopLoss,
                    // Set the PropUserId if necessary
                    PropUserId = propUser.PropUserId // Assuming propUser is defined elsewhere
                };

            // Use the context to add and save the new propTrade instance
            var context = dbContextFactory.CreateDbContext();

            var myT = await context.propUsers.Where(c => c.ApplicationUserId == user2)
              .FirstOrDefaultAsync();
            if (myT.Balance < propTrade.AmountForOrder)
            {
                ErrorMessage = "Not Allow Balance Greater";
                return;
            }
            myT.Balance -= propTrade.AmountForOrder;


            await context.propTrdaes.AddAsync(newPropTrade);
            await context.SaveChangesAsync();
            OrderTradeList = await ListOfOpenTrades();
            propUser = await GetPropUser(user2);

        }
    }

    private double GetPercentage(int level)
    {
        // Map the Level range (2-20) to 0-100% for the progress bar width.
        return (level - 2) / 18.0 * 100;
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(propTrade);
        editContext.OnFieldChanged += HandleFieldChanged;
        // Fetch initial data
        var context = HttpContextAccessor.HttpContext;
        if (context != null)
        {
            var user5 = await UserAccessor.GetRequiredUserAsync(context);
            if (user5 != null)
            {
                user2 = user5.Id; // Get the user ID here
                Console.WriteLine(user5.Id);
                // PropUserId=await GetPropUserId(user2);
                propUser = await GetPropUser(user2);
                userIdprop = propUser.PropUserId;
                //  PropUserId = propUser.PropUserId;
                OrderTradeList = await ListOfOpenTrades();
            }
            else
            {
                ErrorMessage = "Unable to retrieve user.";
            }
        }
        else
        {
            ErrorMessage = "HttpContext is not available.";
        }

        // Set up a timer to refresh data every 5 seconds

    }
    /*This method need to moified later*/
    private decimal CalculateBuyMarketLiquidation(int leverage, decimal orderPrice, decimal amount)
    {
        // Check for zero values to avoid division by zero
        if (leverage == 0 || orderPrice == 0 || amount == 0)
        {
            ErrorMessage = "Zero divide error";
            return 0m; // Handle the error appropriately
        }

        // Calculate the total position size
        decimal totalPositionSize = amount * leverage;
        TotalMargin = totalPositionSize;

        // Calculate the liquidation price using the correct formula
        decimal liquidationPrice = orderPrice * (1 - (amount / totalPositionSize));

        // Store the liquidation price for reference
        LiquidationPrice = liquidationPrice;

        return liquidationPrice;
    }

    private async void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(propTrade.OrderPriceOpened))
        {
            //   await CalculateBuyMarketLiquidation(Level,50000, propTrade.OrderPriceOpened);
        }
    }

    public void Dispose()
    {
        // Dispose the timer when the component is disposed
        _timer?.Dispose();
    }

    [CascadingParameter(Name = "BtcPrice")]
    public string BtcPrice
    {
        get => btcPriceVariable;
        set
        {
            if (btcPriceVariable != value)
            {
                btcPriceVariable = value;
                HandleAllCOmmand().ConfigureAwait(false);



            }
        }
    }
    protected override void OnParametersSet()
    {
        btcPriceVariable = BtcPrice;

    }
    private async Task<List<PropTrade>> ListOfOpenTrades()
    {


        var btcDecimal = decimal.TryParse(btcPriceVariable, out var parsedPrice) ? parsedPrice : 0m;

        // Get the context
        var context = dbContextFactory.CreateDbContext();

        // Log the query execution to check if it's returning any results
        var myTrades = await context.propTrdaes
            .Where(c => c.PropUserId == userIdprop && c.Status == OrderStatus.Open)
            .ToListAsync();

        // Log the results to see what's coming back
        Console.WriteLine($"Number of trades found: {myTrades.Count}");

        // Return the list of trades
        return myTrades;
    }

    private decimal CalculateProfitLossInDollar(decimal orderPrice, decimal currentPrice, decimal amount, int leverage)
    {


        // Calculate the effective Bitcoin amount held in this margin position
        decimal effectiveBitcoin = (amount * leverage) / orderPrice;

        // Calculate the unleveraged profit or loss based on the position type
        decimal unleveragedProfitLoss = 0m;

        // For a long position (buy)
        if (currentPrice > orderPrice)
        {
            // Profit calculation for long position (profit if currentPrice > orderPrice)
            //
            unleveragedProfitLoss = (currentPrice - orderPrice) * effectiveBitcoin;
        }
        else if (currentPrice < orderPrice)
        {
            // Loss calculation for long position (loss if currentPrice < orderPrice)
            unleveragedProfitLoss = (currentPrice - orderPrice) * effectiveBitcoin;
        }

        // Apply leverage
        decimal leveragedProfitLoss = unleveragedProfitLoss;

        // Return the profit or loss in the same currency as the asset (e.g., USD)
        return leveragedProfitLoss;
    }

    private async Task<PropUser> GetPropUser(string userId)
    {
        var context = dbContextFactory.CreateDbContext();
        var mydata = await context.propUsers
        .Where(c => c.ApplicationUserId == userId)
        .FirstOrDefaultAsync();
        return mydata;
    }
    private async Task HandleAllCOmmand()
    {
        OrderTradeList = await ListOfOpenTrades();
        var btcDecimal = decimal.TryParse(btcPriceVariable, out var parsedPrice) ? parsedPrice : 0m;

        var context = dbContextFactory.CreateDbContext();
        var DatasToCHeck = await context.propTrdaes.Where(c => c.PropUserId == propUser.PropUserId && c.Status == OrderStatus.Open)
        .ToListAsync();
        var EditUserX = await context.propUsers.Where(c => c.ApplicationUserId == user2)
        .FirstOrDefaultAsync();

        foreach (var x in DatasToCHeck)
        {
            if (x.StopLoss == 0)
            {
                continue; // Skip to the next item if StopLoss is 0
            }

            if (x.orderTypeProp == OrderTypeProp.Buy)
            {
                // Stop-loss activated if the price has hit or dropped below StopLoss
                if (btcDecimal <= x.StopLoss)
                {
                    var pnl = Math.Round(CalculateProfitLossInDollar(
                        x.OrderPriceOpened,
                        btcDecimal,
                        x.AmountForOrder,
                        x.Leverage),
                1
                    );

                    x.OrderPriceClosed = btcDecimal;
                    x.Status = OrderStatus.StopLoss;
                    x.TradeClosedDate = DateTime.Now;

                    // Corrected addition to balance
                    EditUserX.Balance += (x.AmountForOrder - Math.Abs(pnl));

                    await context.SaveChangesAsync();
                    OrderTradeList = await ListOfOpenTrades();
                }
            }
        }
    }
    private async Task CloseMarketOrder(int tradePoprdId)
    {
        var btcDecimal = decimal.TryParse(btcPriceVariable, out var parsedPrice) ? parsedPrice : 0m;
        var context = dbContextFactory.CreateDbContext();
        var Dataget = await context.propTrdaes.
        Where(c => c.PropTradeId == tradePoprdId).FirstOrDefaultAsync();

        var propuserI = await context.propUsers.
                     Where(c => c.PropUserId == userIdprop).FirstOrDefaultAsync();

        if (btcDecimal > Dataget.OrderPriceOpened)
        {
            var pnl = Math.Round(
                CalculateProfitLossInDollar(
                    Dataget.OrderPriceOpened,
                    btcDecimal,
                    Dataget.AmountForOrder,
                    Dataget.Leverage
                ),
                1 // Rounding to one decimal place
            ); Dataget.ProfitInCase = pnl;

            propuserI.Balance += (pnl + Dataget.AmountForOrder);

            Dataget.Status = OrderStatus.ClosedManually;
            Dataget.OrderPriceClosed = btcDecimal;
            Dataget.TradeClosedDate = DateTime.Now;
            await context.SaveChangesAsync();
            OrderTradeList = await ListOfOpenTrades();
            propUser = await GetPropUser(user2);
        }
        if (btcDecimal <= Dataget.OrderPriceOpened)
        {
            var pnl = Math.Round(
                CalculateProfitLossInDollar(
                    Dataget.OrderPriceOpened,
                    btcDecimal,
                    Dataget.AmountForOrder,
                    Dataget.Leverage
                ),
                1 // Rounding to one decimal place
            ); Dataget.ProfitInCase = pnl;

            propuserI.Balance += Dataget.AmountForOrder - Math.Abs(pnl);

            Dataget.Status = OrderStatus.ClosedManually;
            Dataget.OrderPriceClosed = btcDecimal;
            Dataget.TradeClosedDate = DateTime.Now;
            await context.SaveChangesAsync();
            OrderTradeList = await ListOfOpenTrades();
            propUser = await GetPropUser(user2);
        }
    }
}