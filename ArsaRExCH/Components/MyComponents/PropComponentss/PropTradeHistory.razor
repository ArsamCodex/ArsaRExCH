@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject IdentityUserAccessor UserAccessor
@using ArsaRExCH.Components.Account
@using ArsaRExCH.Components.Chartss
@using ArsaRExCH.Model.Prop
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ArsaRExCH.Data
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject NavigationManager _manager
@attribute [Authorize]

<style>
    /* Main div container styling */
    .order-container {
        width: 100%;
        margin-bottom: 20px;
    }

    .order-item {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 15px;
        background-color: #f9f9f9;
    }

        .order-item h4 {
            margin: 0;
            font-size: 1.25rem;
            color: #007bff;
        }

        .order-item div {
            margin-top: 8px;
        }

    .trade-section {
        margin-top: 30px;
    }

        .trade-section h5 {
            font-size: 1.2rem;
            color: #007bff;
        }




    /* Error message */
    .alert-danger {
        color: #a94442;
        background-color: #f2dede;
        border-color: #ebccd1;
        padding: 15px;
        margin-bottom: 20px;
    }

</style>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (OrderTradeList != null && OrderTradeList.Any())
{
    <div class="order-container">
        @foreach (var user in OrderTradeList)
        {
            int winCount = user.PropTrades.Count(trade => trade.ProfitInCase > 0);
            int lossCount = user.PropTrades.Count(trade => trade.ProfitInCase <= 0);
            decimal totalWin = user.PropTrades.Where(trade => trade.ProfitInCase > 0).Sum(trade => trade.ProfitInCase);
            decimal totalLoss = user.PropTrades.Where(trade => trade.ProfitInCase <= 0).Sum(trade => trade.ProfitInCase);
            decimal highestWin = user.PropTrades?.Where(trade => trade != null && trade.ProfitInCase > 0)
            .DefaultIfEmpty()
            .Max(trade => trade?.ProfitInCase ?? 0) ?? 0;

            decimal highestLoss = user.PropTrades?.Where(trade => trade != null && trade.ProfitInCase <= 0)
            .DefaultIfEmpty()
            .Min(trade => trade?.ProfitInCase ?? 0) ?? 0;

            int totalTrades = user.PropTrades.Count;
            decimal winPercentage = totalTrades > 0 ? (decimal)winCount / totalTrades * 100 : 0;

            <div class="order-container" style="display: flex; gap: 20px;">
                <!-- Block 1: User Info and Summary -->
                <div class="order-item" style="flex: 1; padding: 10px; background-color: #f2f2f2; border-radius: 5px;">
                    <div><strong>Balance:</strong> @user.Balance</div>
                    <div><strong>Account Active:</strong> @user.IsAccountActive</div>
                    <div><strong>Account Type: </strong>@user.CurrentAccountType</div>
                    <div><strong>TermsCondition: </strong>@user.IsTermAndConditionAccepted</div>
                    <div><strong>PropUser ID: </strong>@user.PropUserId</div>

               
                </div>

                <!-- Block 2: Another Section (Add your content here) -->
                <div class="order-item" style="flex: 1; padding: 10px; background-color: #e8f4f8; border-radius: 5px;">
                    <div><strong>Trade Count:</strong> @totalTrades</div>
                    <div><strong>Wins:</strong> @winCount</div>
                    <div><strong>Losses:</strong> @lossCount</div>
                    <div><strong>Win Percentage:</strong> @winPercentage.ToString("F2")%</div>
                    <div><strong>Total Win Amount:</strong> @totalWin </div>
                    <div><strong>Total Loss Amount:</strong> @totalLoss</div>
                    <div><strong>Highest Win Amount:</strong> @highestWin</div>
                    <div><strong>Highest Loss Amount:</strong> @highestLoss</div>
                </div>
            </div>
            <!-- Block 2: Trade Details -->
            <div style="flex: 2; padding: 10px; background-color: #e9ecef; border-radius: 5px;">
                <h5>Trade Details:</h5><div style="margin-bottom: 15px;">
                    <input type="text" placeholder="Search trades..." @bind="SearchTerm" style="padding: 8px; width: 80%;" />
                    <button @onclick="OnSearch" style="padding: 8px 12px; margin-left: 10px;">Search</button>
                </div>
                @if (user.PropTrades.Any())
                {
                    <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                        <thead>
                            <tr style="background-color: #f2f2f2; border-bottom: 2px solid #ccc;">
                                <th style="padding: 8px; text-align: left;">ID</th>
                                <th style="padding: 8px; text-align: left;">Pair</th>
                                <th style="padding: 8px; text-align: left;">Opened Date</th>
                                <th style="padding: 8px; text-align: left;">Closed Date</th>
                                <th style="padding: 8px; text-align: left;">T/P</th>
                                <th style="padding: 8px; text-align: left;">S/L</th>
                                <th style="padding: 8px; text-align: left;">Order Price</th>
                                <th style="padding: 8px; text-align: left;"> Price Closed</th>
                                <th style="padding: 8px; text-align: left;">Amount</th>
                                <th style="padding: 8px; text-align: left;">Leverage</th>
                                <th style="padding: 8px; text-align: left;">Profit</th>
                                <th style="padding: 8px; text-align: left;">Fee</th>
                                <th style="padding: 8px; text-align: left;">Status</th>
                                <th style="padding: 8px; text-align: left;">Quantity</th>
                                <th style="padding: 8px; text-align: left;">Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var trade in user.PropTrades.Where(t =>
                           (t.TradeOpened != null && t.TradeOpened.ToString("yyyy-MM-dd HH:mm").Contains(SearchTerm)) ||
                           (t.TradeClosedDate != null && t.TradeClosedDate.Value.ToString("yyyy-MM-dd HH:mm").Contains(SearchTerm))))
                            {
                                <tr style="border-bottom: 1px solid #ddd;">
                                    <td style="padding: 8px;">@trade.PropTradeId</td>
                                    <td style="padding: 8px; background-color: lightyellow;">@trade.PairName</td>
                                    <td style="padding: 8px;">@trade.TradeOpened.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td style="padding: 8px;">
                                        @(trade.TradeClosedDate.HasValue ? trade.TradeClosedDate.Value.ToString("yyyy-MM-dd HH:mm") : "Not Closed")
                                    </td>
                                    <td style="padding: 8px;">@trade.TakeProfit?.ToString("#.0")</td>
                                    <td style="padding: 8px;">@trade.StopLoss?.ToString("#.0")</td>
                                    <td style="padding: 8px;">@trade.OrderPriceOpened.ToString("#.0")</td>
                                    <td style="padding: 8px;">@trade.OrderPriceClosed?.ToString("#.0")</td>

                                    <td style="padding: 8px;">@trade.AmountForOrder.ToString("#.0")</td>
                                    <td style="padding: 8px;">@trade.Leverage</td>
                                    <td style="padding: 8px;">@trade.ProfitInCase</td>
                                    <td style="padding: 8px;">@trade.FeeInCase</td>
                                    <td style="padding: 8px; background-color: lightgreen;">@trade.Status</td>
                                    <td style="padding: 8px;">@((trade.Leverage * trade.AmountForOrder / trade.OrderPriceOpened).ToString("0.#####"))</td>
                                    <td style="padding: 8px; background-color: orange;">@trade.orderTypeProp</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }


                
                else
                {
                    <div>No trades found for this user.</div>
                }
            </div>
        }
    </div>
}
else
{
    <div>No trades found for this user.</div>
}



@code {
    private string user2 { get; set; }
    private string ErrorMessage { set; get; }
    private List<PropUser> OrderTradeList { get; set; } = new List<PropUser>();
    private string SearchTerm { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context != null)
        {
            var user5 = await UserAccessor.GetRequiredUserAsync(context);
            if (user5 != null)
            {
                user2 = user5.Id;
                OrderTradeList = await GetList(user2);
            }
            else
            {
                ErrorMessage = "Unable to retrieve user.";
            }
        }
        else
        {
            ErrorMessage = "HttpContext is not available.";
        }
    }

    private async Task<List<PropUser>> GetList(string userId)
    {
        try
        {
            var context = await dbContextFactory.CreateDbContextAsync();

            var trades = await context.propUsers
                 .Where(t => t.ApplicationUserId == userId)
                 .Include(x => x.PropTrades.OrderBy(trade =>
                     trade.Status == OrderStatus.Open ? 0 :
                     trade.Status == OrderStatus.Pending ? 1 :
                     trade.Status == OrderStatus.TakeProfit ? 2 :
                     trade.Status == OrderStatus.StopLoss ? 3 :
                     trade.Status == OrderStatus.ClosedManually ? 4 : 5)) // Remaining statuses ordered after Open and Pending
                 .ToListAsync();
            return trades;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching trades: {ex.Message}");
            throw;
        }
    }
    private void OnSearch()
    {
        // Filter only by TradeOpened or TradeClosedDate without using HasValue and Value
        OrderTradeList
            .Select(user => new PropUser
                {
                    ApplicationUserId = user2,
                    Balance = user.Balance,
                    IsAccountActive = user.IsAccountActive,
                    PropTrades = user.PropTrades
                        .Where(trade =>
                            (trade.TradeOpened != null && trade.TradeOpened.ToString("yyyy-MM-dd HH:mm").Contains(SearchTerm)) ||
                            (trade.TradeClosedDate != null && trade.TradeClosedDate.Value.ToString("yyyy-MM-dd HH:mm").Contains(SearchTerm)))
                        .ToList()
                })
            .Where(user => user.PropTrades.Any()) // Only include users with matching trades
            .ToList();
    }

}
