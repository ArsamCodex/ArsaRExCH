@page "/Prepetual"
@using ArsaRExCH.Data
@using ArsaRExCH.Model.Prop
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject AuthenticationStateProvider _AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ArsaRExCH.Interface.PropInterface.IProp _propInterface
@rendermode InteractiveServer
@attribute [Authorize]

<style>
    .header {
        color: #333;
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-align: center;
    }

    .intro {
        text-align: center;
        font-size: 1rem;
        color: #555;
        margin-bottom: 1.5rem;
    }

    .disclaimer {
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        color: #333;
        font-size: 1rem;
        line-height: 1.6;
    }

        .disclaimer p,
        .disclaimer ul {
            margin-bottom: 1rem;
        }

        .disclaimer ul {
            list-style: disc;
            margin-left: 1.5rem;
        }

    .form-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        font-size: 1rem;
    }

        .checkbox-container input[type="checkbox"] {
            margin-right: 10px;
        }

    .proceed-button {
        background-color: #d9534f;
        color: white;
        font-size: 1rem;
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .proceed-button:hover:not(:disabled) {
            background-color: #c9302c;
        }

        .proceed-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
    /* The container div that holds the buttons */
    .button-container {
        display: flex; /* Align children in a row */
        justify-content: space-between; /* Space between buttons */
        width: 100%; /* Full width of the container */
    }

    /* Styling for each button */
    .full-width-btn {
        flex: 1; /* Each button takes up equal space */
        padding: 10px; /* Add some padding to the buttons */
        font-size: 16px; /* Font size */
        background-color: #007bff; /* Button background color */
        color: white; /* Text color */
        border: none; /* Remove border */
        border-radius: 5px; /* Rounded corners */
        cursor: pointer; /* Pointer cursor on hover */
        transition: background-color 0.3s ease; /* Smooth background change */
        margin: 5px; /* Add margin for spacing between buttons */
    }

        /* Change background on hover */
        .full-width-btn:hover {
            background-color: #0056b3;
        }
        /*swap form style*/
    /* Container for the swap form */
    .swap-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        padding: 10px;
        width: 250px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);
    }

    .swap-section {
        width: 100%;
    }

    .swap-input {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 6px;
        outline: none;
        transition: border-color 0.3s ease;
    }

        .swap-input:focus {
            border-color: #007bff;
            background-color: #f0f8ff;
        }

    .swap-button {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .swap-button:hover {
            background-color: #0056b3;
        }


</style>


@if (!hasAcceptedTerms)
{
    <h2 class="header">Perpetual Swap Disclaimer</h2>

    <p class="intro">Initializing user Prop Accounts</p>

    <div class="disclaimer">
        <p><strong>Warning:</strong> Perpetual swaps are complex and high-risk financial instruments. By trading perpetual swaps, you acknowledge the following risks:</p>

        <ul>
            <li><strong>Risk of Total Loss:</strong> You could lose your entire balance.</li>
            <li><strong>Leverage Risk:</strong> Higher leverage increases exposure and can lead to rapid liquidation.</li>
            <li><strong>Market Volatility:</strong> Prices can change suddenly, impacting your position.</li>
            <li><strong>Fees and Costs:</strong> Trading incurs fees that reduce your balance over time.</li>
            <li><strong>System Risk:</strong> Delays in execution during volatility may prevent effective position management.</li>
        </ul>

        <p><strong>Please ensure you fully understand these risks before proceeding. Only trade with funds you are prepared to lose, and consider seeking professional advice if necessary.</strong></p>
    </div>

    <EditForm EditContext="@editContext" class="form-container">
        <div class="checkbox-container">
            <input type="checkbox" id="acceptRisk" @bind="isRiskAccepted" />
            <label for="acceptRisk">
                I acknowledge and accept the risks associated with perpetual swaps.
            </label>
        </div>

        <button type="button" class="btn btn-danger proceed-button" @onclick="HandleAccept" disabled="@IsButtonDisabled">
            Accept and Proceed
        </button>
    </EditForm>
}
else{
@if (propUserList != null && propUserList.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>PropUserId</th>
                <th>Balance</th>
                <th>Account Type</th>
                <th>Account Active</th>
                <th>Term Accepted</th>
                <th>UserId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in propUserList)
            {
                <tr>
                    <td>@user.PropUserId</td>
                    <td>@user.Balance</td>
                    <td>@user.CurrentAccountType</td>
                    <td>@user.IsAccountActive</td>
                    <td>@user.IsTermAndConditionAccepted</td>
                    <td>@user.ApplicationUserId</td>
                </tr>
            }
        </tbody>
    </table>
        <h3>Available Pairs : </h3>

        <div class="button-container">
            <button class="full-width-btn">BTCUSDT</button>
            <button class="full-width-btn">Button 2</button>
            <button class="full-width-btn">Button 3</button>
        </div>
}
else
{
    <p>No PropUsers found.</p>
}

}


<p>@user2</p>
<p>Accepted Confition : @hasAcceptedTerms</p>
<p>Need Transfer USDT from Main Acunt to prepetual</p>
<div class="swap-container">
    <div class="swap-section">
        <span class="input-text">From Main Account</span>

        <input type="number" @bind="fromValue" placeholder="From Main Account $" class="swap-input" />
    </div>


    <span class="balance-text">Balance: @mainAccountBalance USDT</span>
    <button class="swap-button" @onclick="HandleSwap">Transfer</button>
</div>



@code {
    private bool isRiskAccepted = false;
    private EditContext editContext;
    public string user2 { get; set; }
    private bool hasAcceptedTerms;
    public IEnumerable<PropTrade> propTrades { get; set; } = new List<PropTrade>();
    private PropUser propUser = new PropUser();
    private IEnumerable<PropUser> propUserList = new List<PropUser>();
    private bool IsButtonDisabled => !isRiskAccepted;

    private decimal fromValue;
    private double mainAccountBalance;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(this);
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            var context = dbContextFactory.CreateDbContext();
            var chekme = await context.propUsers
                        .Where(u => u.ApplicationUserId == user2) // Adjust to your user identifier field
                        .Select(u => u.IsTermAndConditionAccepted)
                        .FirstOrDefaultAsync();
            if (chekme)
            {
                hasAcceptedTerms = true;
                var propUserList2 = await _propInterface.GetAll<PropUser>();
                propUserList = propUserList2.Where(c => c.ApplicationUserId == user2);
                mainAccountBalance = await USDTWalletAmountExtractor();


            }

        }

    }
    private async Task HandleAccept()
    {

        // Initialize a new PropUser object
        var propUser = new PropUser
            {
                // Create a new ApplicationUser object and assign the user ID
                ApplicationUser = new ApplicationUser
                {
                    Id = user2 // Assuming user2 is the ApplicationUserId (string or GUID)
                },

                // Set the acceptance flag
                IsTermAndConditionAccepted = true,

                // Example initial balance, replace with actual logic or value
                Balance = 1000.00m,

                // Set the account type (replace with actual logic or value)
                CurrentAccountType = AccountType.Standard,

                // Set the account status to active (or false if not active)
                IsAccountActive = true,

                // Initialize the list of PropTrades (if necessary)
                PropTrades = new List<PropTrade>()
            };

        // If you need to associate with ApplicationUser, fetch it from the database
        using (var context = dbContextFactory.CreateDbContext())
        {
            var applicationUser = await context.ApplicationUsers
                                               .FirstOrDefaultAsync(u => u.Id == user2);

            if (applicationUser != null)
            {
                // Associate the ApplicationUser with PropUser
                propUser.ApplicationUser = applicationUser;
            }
            else
            {
                //  _logger.LogWarning($"ApplicationUser with Id {user2} not found.");
            }

            // Add the PropUser to the context and save changes
            await context.propUsers.AddAsync(propUser);
            await context.SaveChangesAsync();
        }


        // After saving, set terms acceptance flag
        hasAcceptedTerms = true;

        // Fetch the updated list of PropUsers for the given ApplicationUserId
        var propUserList2 = await _propInterface.GetAll<PropUser>();
        propUserList = propUserList2.Where(c => c.ApplicationUserId == user2).ToList();

        // You can now work with propUserList, e.g., update UI or process further
    }
    private async Task HandleSwap()
    {
        if (fromValue > (decimal)mainAccountBalance)
        {
            // Consider adding a notification here for insufficient funds
            return;
        }

        var context = dbContextFactory.CreateDbContext();

        // Retrieve the wallet for the user and the "USDT" pair
        var wallet = await context.Wallet
                                   .Where(c => c.ApplicationUserId == user2 && c.PairName == "USDT")
                                   .FirstOrDefaultAsync();
        // Retrieve the user's prop wallet
        var prepWalletEdit = await context.propUsers
                                          .Where(c => c.ApplicationUserId == user2)
                                          .FirstOrDefaultAsync();

        // Check if wallet is null
        if (wallet == null)
        {
            // Handle the case where the wallet is not found, possibly returning or notifying the user
            return;
        }

        // Update wallet amount (consider using decimal for consistency)
        wallet.Amount -= (double)fromValue; 

   

        // Check if prop user is found
        if (prepWalletEdit == null)
        {
            // Handle the case where the prop user is not found, possibly returning or notifying the user
            return;
        }

        // Update the prop wallet balance
        prepWalletEdit.Balance += fromValue;

        // Save changes to the database
        await context.SaveChangesAsync();
        mainAccountBalance = await USDTWalletAmountExtractor();
        var propUserList2 = await _propInterface.GetAll<PropUser>();
        propUserList = propUserList2.Where(c => c.ApplicationUserId == user2);
    }

    private async Task<double> USDTWalletAmountExtractor()
    {
        var context = dbContextFactory.CreateDbContext();
        var wallet = await context.Wallet
            .Where(c => c.ApplicationUserId == user2 && c.PairName == "USDT")
            .FirstOrDefaultAsync();

        return wallet?.Amount ?? 0;
    }
}