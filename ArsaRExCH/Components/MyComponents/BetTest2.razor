@page "/Bet1"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize]
@rendermode InteractiveServer
@inject ArsaRExCH.Interface.BetInterface _interface
@inject ArsaRExCH.Interface.WalletInterface<double> _interface2
@using ArsaRExCH.Model
@using ArsaRExCH.Components.Pages
@using ArsaRExCH.Components.MyComponents
@inject NavigationManager manager
@inject ArsaRExCH.Interface.PriceInterface _priceInterface

<B3 @ref="br"></B3>

<div style="@divStyle">
    @divText
</div>

<br />
<hr />
<br />
<div style="background-color: #f0f0f0; border: 2px solid #ccc; padding: 10px; border-radius: 5px;">
    <select @bind="pairName" style="width: 100%; padding: 5px; border-radius: 3px; border: 1px solid #ccc;">
        <option value="disabled">Select Pair</option>
        @foreach (var pair in availablepairs)
        {
            <option value="@pair">@pair</option>
        }
    </select>
</div>

<p>Selected Pair: @pairName</p>
<div>
    @if (pairName == "BTC/ETH")
    {
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-container" style="display: inline-flex; flex-wrap: wrap; gap: 10px; align-items: center;width:auto">
                <div class="form-group" style="width: auto;">
                    <label for="btcPriceExpireBet">BTC Price Expire Bet</label>
                    <InputNumber @bind-Value="BetModel.BtcPriceExpireBet" id="btcPriceExpireBet" class="form-control form-control-sm" />
                </div>

                <div class="form-group" style="width: auto;">
                    <label for="hitDateBTC">Hit Date BTC</label>
                    <InputDate @bind-Value="BetModel.HitDateBTC" id="hitDateBTC" class="form-control form-control-sm" />
                </div>

                <div class="form-group" style="width: auto">
                    <label for="betAmountBtc">Bet Amount BTC</label>
                    <InputNumber @bind-Value="BetModel.BetAmountBtc" id="betAmountBtc" class="form-control form-control-sm" />
                </div>
            </div>

            <br />
            <br />

            <div class="form-container" style="display: inline-flex; flex-wrap: wrap; gap: 10px; align-items: center;width:auto">
                <div class="form-group" style="width:auto;">
                    <label for="ethPriceExpireBet">ETH Price Expire Bet</label>
                    <InputNumber @bind-Value="BetModel.EthPriceExpireBet" id="ethPriceExpireBet" class="form-control form-control-sm" />
                </div>

                <div class="form-group" style="width: auto;">
                    <label for="hitDateETH">Hit Date ETH</label>
                    <InputDate @bind-Value="BetModel.HitDateETH" id="hitDateETH" class="form-control form-control-sm" />
                </div>
                <div class="form-group" style="width: auto;">
                    <label for="betAmountETH">Bet Amount ETH</label>
                    <InputNumber @bind-Value="BetModel.BetAmountETH" id="betAmountETH" class="form-control form-control-sm" />
                </div>
            </div>
            <br /><br />
        </EditForm>

        <button class="btn btn-primary" @onclick="HandleValidSubmit">Place Bet</button>
    }
    @if (pairName == "BTC/BNB")
    {
        <p>BNB form </p>
    }
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
<style>
    /* Styles omitted for brevity */
</style>

@code {
    private List<string> availablepairs = new List<string> { "BTC/ETH", "BTC/BNB" };
    public string pairName { get; set; }
    private string ErrorMessage { get; set; }
    private Bet BetModel = new Bet();
    private EditContext editContext;
    private string user2 { get; set; }
    private double BtcBetAmout { get; set; }
    private double EthBetAmout { get; set; }
    private string divText = "";
    private string divStyle = "";
    private string BetGeneratedHAsh { get; set; }
    private ArsaRExCH.Components.MyComponents.B3 br;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(BetModel);
        editContext.OnFieldChanged += OnFieldChanged;

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            BetModel.HitDateBTC = DateTime.Now;
            BetModel.HitDateETH = DateTime.Now;
        }
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        // Example field change handling, such as validating a field.
        if (e.FieldIdentifier.FieldName == nameof(BetModel.BtcPriceExpireBet))
        {
            // Perform additional logic if needed
        }
    }

    public async Task HandleValidSubmit()
    {
        if (!editContext.Validate())
        {
            ErrorMessage = "Please correct the validation errors.";
            return;
        }

        if (BetModel.HitDateETH.Date == BetModel.HitDateBTC.Date)
        {
            BetModel.IsBetActive = true;
            BetModel.ISDeleted = false;
            BetModel.UserIdSec = user2;
            BetModel.BtcPriceNow = await _priceInterface.GetBtcPriceFromBinance();
            BetModel.EthPriceNow = await _priceInterface.GetEthPriceFromBinance();
            BetModel.OpendBetAtricle = DateTime.UtcNow;
            BtcBetAmout = BetModel.BetAmountBtc;
            EthBetAmout = BetModel.BetAmountETH;

            try
            {
                BetModel.BetSignutare = await _interface.Generatesha256();
                BetGeneratedHAsh = BetModel.BetSignutare;
                await _interface.SaveBet(BetModel);
                BetModel = new Bet();
                await _interface2.EditWalletAmountDecrease(user2, BtcBetAmout);
                await _interface2.EditWalletAmountDecresETH(user2, EthBetAmout);
                ErrorMessage = string.Empty;
            }
            catch (InvalidOperationException ex)
            {
                ErrorMessage = ex.Message;
                return;
            }
            catch (Exception ex)
            {
                ErrorMessage = "An unexpected error occurred: " + ex.Message;
                return;
            }

         //   ChangeColor();
            await br.FetchBalancesAsync();
            manager.NavigateTo($"/BetPreview/{BetGeneratedHAsh}", true);
        }
        else
        {
            ErrorMessage = "Dates should be the same.";
        }
    }
}
