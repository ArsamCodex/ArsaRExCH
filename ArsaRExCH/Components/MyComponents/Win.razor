@rendermode InteractiveServer
@inject ArsaRExCH.Interface.BetInterface _interface
@inject ArsaRExCH.Interface.WalletInterface<double> _interface2
@inject AuthenticationStateProvider _AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ArsaRExCH.DTOs
@using ArsaRExCH.Components.Pages
@using ArsaRExCH.Components.MyComponents


<style>
    .bet-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px; /* Adjust the gap between items as needed */
    }

    .bet-item {
        border: 1px solid #ccc; /* Optional styling */
        padding: 10px;
        background-color: #f9f9f9; /* Optional background color */
        border-radius: 4px; /* Optional border radius */
    }
</style>

@if (userTotalWinningAmounts == null)
{
    <p>Loading...</p>
}
else if (userTotalWinningAmounts.Count == 0)
{
    <p>No Winners</p> <!-- Debug message if no data -->
}
else
{
    <center><b> <p>Most 10 Winners</p></b></center>
    <div class="bet-container" style="width:100%">
        @foreach (var userBet in userTotalWinningAmounts)
        {
            <div class="bet-grid">
                <div class="bet-item"><strong>User</strong> @userBet.UserId</div>
                <div class="bet-item"><strong>Total Win</strong> @userBet.TotalWinningAmount </div>
                <div class="bet-item">
                    <a href="/UserAnalytic/@userBet.UserId">View History</a>
                </div>
                
            </div>
           

        }
    </div>
    
}


@code {
    /* This component is responsible for  get first 10 or more winners to show*/
    private string user2 { get; set; }
    private List<ArsaRExCH.DTOs.UserBetCount> userTotalWinningAmounts;
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            try
            {
                userTotalWinningAmounts = await _interface2.GetFIrstXwinners();
                if (userTotalWinningAmounts == null || userTotalWinningAmounts.Count == 0)
                {
                    Console.WriteLine("No data found or error in fetching data.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
            }




        }

    }

}
