@page "/AirDrop"
@using ArsaRExCH.Data
@using ArsaRExCH.Interface
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize]
@rendermode InteractiveServer
@using ArsaRExCH.Model
@using ArsaRExCH.Components.Pages
@using ArsaRExCH.Components.MyComponents
@inject NavigationManager manager
@inject ArsaRExCH.Interface.AirDropInterface _airdropInterface

   <div class="div-container">
        <div class="fixed-div">70</div>
    <div class="fixed-div">100</div>
    <div class="fixed-div">140</div>
    <div class="fixed-div">200</div>
    <div class="fixed-div">240</div>
    <div class="fixed-div">Level 6</div>
    <div class="fixed-div">Level 7</div>
    <div class="fixed-div">Level 8</div>
    <div class="fixed-div">Level 9</div>
    <div class="fixed-div">Level 10</div>
    </div>
<AirDropBalanceExtractor @ref="airDropBalanceExtractor"></AirDropBalanceExtractor>
<DailyClickCount @ref="dailyClickCount"></DailyClickCount>
<center>
<div class="container">

        <button class="airdrop-button" @onclick="HandleSubmit">Click To Get Free AirDrop Point</button>

    @if (isSuccess)
    {
        <p class="success-message">click Garanted</p>
    }
    else if (isFailed)
    {
        <p class="error-message">Failed to increment click count.</p>
    }
</div>
<p>@Message</p>
</center>
<br />
<br />
<br />
<p><a href="">Go To AirDrop Faq</a></p>
<style>
    .airdrop-title {
        font-family: Arial, sans-serif;
        color: #333;
        text-align: center;
    }

    .airdrop-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        margin: 10px;
        width: 500px;
        height: 150px;
    }

        .airdrop-button:hover {
            background-color: #45a049;
        }

    .success-message {
        color: green;
        font-weight: bold;
        text-align: center;
    }

    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
    }

    .div-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .fixed-div {
        background-color: #2196F3;
        color: white;
        width: 100px;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        font-size: 24px;
    }

    .container {
        text-align: center;
    }
</style>
@code {
    public string? Message { get; set; }
    private bool isSuccess = false;
    private bool isFailed = false;
    private string user2{ get; set; }
    public ArsaRExCH.Model.AirDrop newAirDrop = new Model.AirDrop();
    public int WalletBalanceAirDrop { get; set; }
    private ArsaRExCH.Components.MyComponents.AirDropBalanceExtractor airDropBalanceExtractor;

    private ArsaRExCH.Components.MyComponents.DailyClickCount dailyClickCount;

    public async Task HandleSubmit()
    {
        try
        {
            // Retrieve the user's AirDrop entry
            var airDrop = await _airdropInterface.GetAirDropById(user2);

            if (airDrop != null)
            {
                var x =  await _airdropInterface.IncrementAndSaveAirDrop(user2);
                if (x == false)
                {
                    Message = "reached  daily limit";
                }
                await airDropBalanceExtractor.FetchBalancesAsync();
                await dailyClickCount.FetchBalancesAsync();
            }
            else
            {
                // If no AirDrop exists, create a new one
                newAirDrop.TimeClick = DateTime.Now;
                newAirDrop.ApplicationUserId = user2;
                newAirDrop.HowMannyClickInTottal = 1; // First click
                newAirDrop.DailyClickCount = 1;
                newAirDrop.LastClickDate = DateTime.Now.Date;
                Console.WriteLine("First time click: new AirDrop entry added to DB.");
                // Save new AirDrop
                await _airdropInterface.SaveDrop(newAirDrop);
                await dailyClickCount.FetchBalancesAsync();

            }
        }
        catch (Exception ex)
        {
            // Handle potential errors and log the exception
            Console.WriteLine($"Error handling submit: {ex.Message}");
            throw; // Re-throw the exception to propagate it if needed
        }
    }



    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;



        }

    }
}