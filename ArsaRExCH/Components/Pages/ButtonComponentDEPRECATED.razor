@using ArsaRExCH.Model
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@using System.Text.Json
@inject ArsaRExCH.Interface.WalletInterface<double> _interface
@using ArsaRExCH.DTOs

<button @onclick="OnClickAsync" >Place Bet</button>

@code {
    public string? user2 { get; set; }
    private List<double> btcBalances = new List<double>();
    private List<double> ethBalances = new List<double>();
    private List<double> bnbBalances = new List<double>();

    [Parameter]
    public EventCallback OnClick { get; set; }

    // This method is triggered when the button is clicked
    private async Task OnClickAsync()
    {
        // Optional: Trigger any event callback if set by parent
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }

        // Call the FetchBalancesAsync method to execute its logic
       // await FetchBalancesAsync();
    }

    // Method to fetch balances from the API or service
    public async Task FetchBalancesAsync()
    {
        // Fetch the current authentication state
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Retrieve the user identifier (e.g., user ID)
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            if (!string.IsNullOrEmpty(user2))
            {
                // Fetch wallet balances for the authenticated user
                var (btc, eth, bnb) = await _interface.GetWalletBalancesForUser(user2);
                btcBalances = btc ?? new List<double>();
                ethBalances = eth ?? new List<double>();
                bnbBalances = bnb ?? new List<double>();

                // Refresh the UI to reflect updated balances
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }
    }
}