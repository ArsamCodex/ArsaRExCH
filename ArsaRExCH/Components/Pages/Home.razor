@page "/"
@using ArsaRExCH.Data
@using ArsaRExCH.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@using System.Net
@using System.Net.Sockets
@using System.Diagnostics
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@inject ArsaRExCH.Interface.BetInterface _face
@inject ArsaRExCH.Interface.UserIpInterface _faceUser
@inject ApplicationDbContext _context
<style>
    .win-container {
        border: 2px solid #000;
        padding: 2px;
        border-radius: 5px;
        display: inline-block;
    }
</style>

<div class="win-container">
   <ArsaRExCH.Components.MyComponents.Win></ArsaRExCH.Components.MyComponents.Win>


</div>
<p>Your IP Address: @ipadress</p>
<p>Your IP Address: @ipadressII</p>
<p>@bannedc</p>
@if (!string.IsNullOrEmpty(BanMessage))
{
    <div class="alert alert-danger">@BanMessage</div>
}

@code {
    public string ipadress { get; set; }        
    public string ipadressII { get; set; }
    public string bannedc { get; set; }
    public string Hitid { get; set; }
    public string BanMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ipadress = await _face.GetClientIpAddress();
        ipadressII = await _faceUser.GetPublicIpAddress();

        Console.WriteLine($"Client IP Address: {ipadress}");
        Console.WriteLine($"Public IP Address: {ipadressII}");

        BanMessage = await CheckIfIpIsBanned(ipadressII); // Capture return value
        Console.WriteLine($"Ban Message: {BanMessage}"); // Debug output
    }

    public async Task<string> CheckIfIpIsBanned(string userIpAddress)
    {
        // Retrieve the list of banned IP addresses (which are already two digits) from the database
        var bannedIpAddresses = await _context.BanedCountris
            .Where(b => !string.IsNullOrEmpty(b.IpAdressToBann))
            .Select(b => b.IpAdressToBann)
            .ToListAsync();

        Console.WriteLine("Banned IP Addresses:");
        foreach (var ip in bannedIpAddresses)
        {
            Console.WriteLine(ip);
        }

        string userIpFirstTwoDigits = ExtractFirstTwoDigits(userIpAddress);
        Console.WriteLine($"User IP First Two Digits: {userIpFirstTwoDigits}");

        foreach (var bannedIp in bannedIpAddresses)
        {
            Console.WriteLine($"Comparing with banned IP: {bannedIp}");
            if (userIpFirstTwoDigits == bannedIp)
            {

                Console.WriteLine("IP match found. User is banned.");
                return "You are banned from accessing this service.";
            }
        }

        Console.WriteLine("No match found. User is not banned.");
        return string.Empty; // Return empty if not banned
    }



    // Helper method to extract the first two digits from the IP address
    private string ExtractFirstTwoDigits(string ipAddress)
    {
        // Regex to capture only the first one or two digits before the first dot
        var match = Regex.Match(ipAddress, @"^(\d{1,2})");

        if (match.Success)
        {
            // Return the first one or two digits before the dot
            return match.Groups[1].Value;
        }

        return "Invalid IP"; // Return an error indicator if not a valid IP format
    }



}
