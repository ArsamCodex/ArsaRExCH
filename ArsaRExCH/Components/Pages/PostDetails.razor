@page "/PostDetails/{postId:int}"
@using ArsaRExCH.Interface
@using ArsaRExCH.Model
@inject PostNadReplyInterface PostService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@rendermode InteractiveServer

<h3>Post Details</h3>
@if (post != null)
{
    <div class="post-details">
        <h4>@post.Title</h4>
        <small>Posted on: @post.CreatedAt.ToString("dd/MM/yyyy")</small>
        <p><b>@post.Content</b></p>
        <div style="width:auto;background-color:black"><h4>Replies:</h4></div>
        @if (post.Replies != null && post.Replies.Any())
        {
            <ul>
                @foreach (var reply in post.Replies)
                {
                    <li>
                        @reply.Content <br />
                        (Replied on: @reply.RepliedAt.ToString("dd/MM/yyyy")) User: @reply.UserIdRelied.Substring(Math.Max(0, @reply.UserIdRelied.Length - 10))  
                    </li>
                    @if (isAdmin) // Check if the user is an admin
                    {
                        <button class="btn btn-danger">Remove</button>
                    }
                }
            </ul>
            <hr />
        }
        else
        {
            <p>No replies yet.</p>
        }
    </div>
}
else
{
    <p>Loading...</p>
}
<div class="fixed-edit-form">
    <h4> Reply</h4>
    <EditForm Model="@PostReply" OnValidSubmit="HandleValidSubmit" FormName="name">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="replyContent">Reply Content</label>
            <InputTextArea id="replyContent"
                           class="form-control"
                           @bind-Value="PostReply.Content"
                           @oninput="UpdateCharacterCount"
                           maxlength="170" />
            <small>@characterCount/170 characters</small>
        </div>

        <button type="submit" class="btn btn-primary">Submit Reply</button>

    </EditForm>
</div>
<style>
    /* General styles for the post details section */
    .post-details {
        border: 1px solid #007BFF; /* Primary color border */
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
        background-color: white; /* Light background for readability */
        max-width: auto; /* Limit the width for better readability */
        margin-left: auto;
        margin-right: auto; /* Center the details box */
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        font-size: 16px; /* Adjust font size for better readability */
        color: #333; /* Text color for readability */
    }


        .post-details h4 {
            color: red; /* Bootstrap primary color for the title */
            margin-top: 0; /* Remove top margin */
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .post-details p {
            color: #333; /* Darker text color for content */
        }

        .post-details small {
            color: #888; /* Lighter color for timestamps */
        }

    /* Styling for the replies section */
    ul {
        list-style-type: none; /* Remove bullets */
        padding-left: 0; /* Remove padding */
    }

    li {
        padding: 5px;
        border-bottom: 1px solid #ddd; /* Separate replies */
        color: black; /* Grey color for replies */
    }

        li:last-child {
            border-bottom: none; /* Remove bottom border for last reply */
        }

    /* Style for the loading message */
    p {
        color: #666; /* Lighter gray color */
    }
</style>
<p>Is Admin : @isAdmin</p>
@code {
    [Parameter]
    public int postId { get; set; }
    private Post post;
    private Reply PostReply = new Reply();
    private string user2 { get; set; }
    private int characterCount = 0;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)

        {
            isAdmin = await IsAdmin();
            user2 = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            post = await PostService.GetPostByIdAsync(postId);
            //  PostReply = new Reply();
        }

    }

    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        PostReply.Content = e.Value.ToString(); // Update the bound property
        characterCount = PostReply.Content.Length; // Update character count
    }




    private async Task HandleValidSubmit()
    {

        PostReply.RepliedAt = DateTime.Now;
        PostReply.UserIdRelied = user2;
        PostReply.PostId = postId;
        // PostReply.Content = "xssss";



        // Call the service to create the reply (assuming it doesn't return anything)
        await PostService.CreateReplyAsync(PostReply);

        // Optionally, refresh the post to show the updated replies
        post = await PostService.GetPostByIdAsync(postId);

        // Optionally clear the PostReply for a new reply entry
        PostReply = new Reply(); // Reset the form
    }
    private async Task<bool>  IsAdmin()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user has the admin role or specific claim
        return user.IsInRole("Admin"); // Adjust according to your role system
    }
}
