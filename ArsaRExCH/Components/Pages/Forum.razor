@page "/Forum"
@using ArsaRExCH.Interface
@using ArsaRExCH.Model
@using System.Security.Claims
@inject PostNadReplyInterface PostService

@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>All Posts</h3>

@if (posts != null && posts.Any())
{
    <div class="post-list">
        @foreach (var post in posts)
        {
            <div class="post-item">
                <h4>@post.Title</h4>
                <p>@post.Content</p>
                <small>Posted on: @post.CreatedAt.ToString("dd/MM/yyyy")</small>
                <button class="btn btn-secondary" @onclick="() => ShowPostDetails(post)">View Details</button>
            </div>
        }
    </div>

    @if (selectedPost != null)
    {
        <div class="post-details">
            <h3>@selectedPost.Title</h3>
            <p>@selectedPost.Content</p>
            <small>Posted by Admin on @selectedPost.CreatedAt.ToString("dd/MM/yyyy")</small>

            <h4>Replies:</h4>
            @if (selectedPost.Replies != null && selectedPost.Replies.Any())
            {
                <ul>
                    @foreach (var reply in selectedPost.Replies)
                    {
                        <li>@reply.Content (Replied on: @reply.RepliedAt.ToString("dd/MM/yyyy"))</li>
                    }
                </ul>
            }
            else
            {
                <p>No replies yet.</p>
            }

            <h4>Leave a Reply:</h4>
            <textarea class="form-control" @bind="newReply.Content" placeholder="Write your reply..."></textarea>
            <button class="btn btn-primary" @onclick="SubmitReply">Submit Reply</button>

            <p>@replyMessage</p>
        </div>
    }
}
else
{
    <p>No posts available at the moment.</p>
}

@code {
    private List<Post> posts = new List<Post>();
    private Post selectedPost = null;
    private Reply newReply = new Reply();
    private string replyMessage = "";

    protected override async Task OnInitializedAsync()
    {
        posts = await PostService.GetAllPostsAsync();
    }

    private void ShowPostDetails(Post post)
    {
        selectedPost = post;
        newReply = new Reply { PostId = post.PostId };
    }

    private async Task SubmitReply()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            newReply.RepliedAt = DateTime.Now;
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var success = await PostService.AddReplyAsync(newReply, userId);

            if (success)
            {
                replyMessage = "Reply submitted successfully!";
                selectedPost.Replies.Add(newReply); // Add the new reply to the displayed replies
                newReply = new Reply { PostId = selectedPost.PostId }; // Reset the reply form
            }
            else
            {
                replyMessage = "Failed to submit reply.";
            }
        }
        else
        {
            replyMessage = "You must be logged in to reply.";
        }
    }
}
