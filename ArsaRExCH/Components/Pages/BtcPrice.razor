@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading
@using System.Threading.Tasks
@using System.Net.Http
@inject IHttpClientFactory httpClientFactory
@rendermode InteractiveServer

<div style="display: flex; gap: 20px">
    <p>BTC Price: <b>@btcPriceString USD</b></p>
    <p>ETH Price: <b>@ethPriceString USD</b></p>
</div>

<CascadingValue Value="@btcPriceString" Name="BtcPrice">
    <CascadingValue Value="@ethPriceString" Name="EthPrice">
        @ChildContent

    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private decimal btcPrice;
    private decimal ethPrice;
    private Timer timer;

    private string btcPriceString => btcPrice.ToString("F2");
    private string ethPriceString => ethPrice.ToString("F2");

    protected override void OnInitialized()
    {
        // Initialize the timer to fetch data every 10 seconds
        timer = new Timer(async _ => await FetchCryptoPrices(), null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    private async Task FetchCryptoPrices()
    {
        try
        {
            // Use IHttpClientFactory to create an HttpClient instance with a pre-configured base address
            var httpClient = httpClientFactory.CreateClient("BinanceClient");

            // Fetch BTC price
            var btcResponse = await httpClient.GetStringAsync("api/v3/ticker/price?symbol=BTCUSDT");
            var btcPriceData = JsonSerializer.Deserialize<CryptoPriceResponse>(btcResponse);
            btcPrice = decimal.Parse(btcPriceData.Price);

            // Fetch ETH price
            var ethResponse = await httpClient.GetStringAsync("api/v3/ticker/price?symbol=ETHUSDT");
            var ethPriceData = JsonSerializer.Deserialize<CryptoPriceResponse>(ethResponse);
            ethPrice = decimal.Parse(ethPriceData.Price);

            // Log to console for debugging
            Console.WriteLine($"BTC Price from btcprice component: {btcPrice}, ETH Price: {ethPrice}");

            await InvokeAsync(StateHasChanged); // Notify the UI to re-render
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prices: {ex.Message}");
        }
    }
    private class CryptoPriceResponse
    {
        [JsonPropertyName("price")]
        public string Price { get; set; }
    }

    public void Dispose()
    {
        // Dispose of the timer when the component is disposed
        timer?.Dispose();
    }

  
}