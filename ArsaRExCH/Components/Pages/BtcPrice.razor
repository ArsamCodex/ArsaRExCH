@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading
@using System.Threading.Tasks
@using System.Net.Http
<h3>BtcPriceComponent</h3>


<div style="display: flex; gap: 20px;">
    <p>Current BTC Price: <b>@btcPrice USD</b></p>
    <p>Current ETH Price: <b>@ethPrice USD</b></p>
</div>

@code {
    private decimal btcPrice;
    private decimal ethPrice;
    private Timer timer;
    private readonly HttpClient httpClient = new HttpClient();

    protected override void OnInitialized()
    {
        // Initialize the timer to fetch data every 10 seconds
        timer = new Timer(async _ => await FetchCryptoPrices(), null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    private async Task FetchCryptoPrices()
    {
        try
        {
            // Fetch BTC price
            var btcResponse = await httpClient.GetStringAsync("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT");
            var btcPriceData = JsonSerializer.Deserialize<CryptoPriceResponse>(btcResponse);
            btcPrice = decimal.Parse(btcPriceData.Price);

            // Fetch ETH price
            var ethResponse = await httpClient.GetStringAsync("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT");
            var ethPriceData = JsonSerializer.Deserialize<CryptoPriceResponse>(ethResponse);
            ethPrice = decimal.Parse(ethPriceData.Price);

            InvokeAsync(StateHasChanged); // Notify the UI to re-render
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prices: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Dispose of the timer when the component is disposed
        timer?.Dispose();
    }

    private class CryptoPriceResponse
    {
        [JsonPropertyName("price")]
        public string Price { get; set; }
    }
}